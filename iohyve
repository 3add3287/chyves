#!/bin/sh

# iohyve v0.6.6 2015/10/15 "You sed what edition"

# Process command line
__parse_cmd () {
  while [ $# -gt 0 ] ; do
    case "$1" in
      version)  __version
                exit
      ;;
      setup)    __setup "$@"
                exit
      ;;
      list)     __list
                exit
      ;;
      info)	__info "$@"
		exit
      ;;
      isolist)  __isolist
                exit
      ;;
      fwlist)	__fwlist
                exit
      ;;
      fetch)    __fetch "$@"
                exit
      ;;
      cpiso)	__cpiso "$@"
		exit
      ;;
      renameiso) __renameiso "$@"
                exit
      ;;
      rmiso) 	__deleteiso "$@"
                exit
      ;;
      fetchfw)	__fetchfw "$@"
                exit
      ;;
      cpfw)	__cpfw "$@"
                exit
      ;;
      renamefw) __renamefw "$@"
                exit
      ;;
      rmfw)	__deletefw "$@"
                exit
      ;;
      create)   __create "$@"
                exit
      ;;
      install)  __install "$@"
                exit
      ;;
      load)     __load "$2" "$3"
                exit
      ;;
      boot)     __boot "$2" "$3" "$4"
                exit
      ;;
      start)    __start "$@"
                exit
      ;;
      uefi)	__uefi "$@"
		exit
      ;;
      stop)     __stop "$@"
                exit
      ;;
      scram)    __scram
                exit
      ;;
      destroy)  __destroy "$@"
                exit
      ;;
      rename)   __rename "$@"
                exit
      ;;
      delete)   __delete "$@"
                exit
      ;;
      set)      __set "$@"
                exit
      ;;
      get)      __get "$@"
                exit
      ;;
      rmpci)	__rmpci "$@"
		exit
      ;;
      getall)   __getall "$@"
                exit
      ;;
      fix-bargs) __fixbargs "$@"
		exit
      ;;
      add)	__add "$@"
		exit
      ;;
      remove)	__remove "$@"
		exit
      ;;
      resize)   __resize "$@"
                exit
      ;;
      disks)	__disks "$@"
		exit
      ;;
      snap)	__snapguest "$@"
		exit
      ;;
      roll)	__rollguest "$@"
		exit
      ;;
      clone)	__cloneguest "$@"
		exit
      ;;
      snaplist)	__snaplist
		exit
      ;;
      taplist)  __taplist
                exit
      ;;
      activetaps) __activetaps
                exit
      ;;
      conlist)  __conlist
                exit
      ;;
      console)  __console "$@"
                exit
      ;;
      conreset) __conreset
                exit
      ;;
      man)      __man
                exit
      ;;
      help|-h)  __help
                exit
      ;;
    esac
    shift
  done
}

# Show version
__version() {
  echo 'iohyve v0.6.6 2015/10/15 You sed what edition'
}

# Setup iohyve
__setup() {
  local pool="$2"
  echo "Setting up iohyve..."
  zfs create $pool/iohyve
  zfs set mountpoint="/iohyve" $pool/iohyve
  zfs create $pool/iohyve/ISO
  zfs set mountpoint="/iohyve/ISO" $pool/iohyve/ISO
  zfs create $pool/iohyve/Firmware
  zfs set mountpoint="/iohyve/Firmware" $pool/iohyve/Firmware
}

__get_bhyve_cmd() {
  local devices="$1"
  local pci_slot_count=0
  for device in $devices ; do
    echo "-s $pci_slot_count,$device"
    pci_slot_count=$(( pci_slot_count + 1 ))
  done
}

# Get PCI device config from zfs
__get_zfs_pcidev_conf() {
  local pool="$1"
  local oldifs=$IFS
  #local pci
  IFS=$'\n'
  for pcidev in $(zfs get -H -o property,value all $pool | grep iohyve:pcidev: | sort )
  do
    echo $pcidev | cut -f2-
  done
  IFS=$oldifs
}

# List Guests
__list() {
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local guestlist="$(zfs list -H | grep iohyve | grep -v ISO | grep -v disk | grep -v Firmware | sed 1d | cut -f1 | cut -d '/' -f3)"
	(
	printf 'Guest\tVMM?\tRunning?\trcboot?\tDescription\n'
	for guest in $guestlist; do
		local vmm="/dev/vmm/ioh-$guest"
		if [ -e $vmm ]; then
			vmm="YES"
		else
			vmm="NO"
		fi
		local running="$(ps -ax | grep "ioh-$guest (bhyve)" | grep -v grep | cut -d ' ' -f1)"
		if [ -z $running ]; then
			running="NO"
		elif [ $running -gt '1' ]; then
			running="YES"
		else
			running="NO"
		fi
		local boot="$(zfs get -H -o value iohyve:boot $pool/iohyve/$guest)"
		if [ $boot = '1' ]; then
			boot="YES"
		else
			boot="NO"
		fi
		local description="$(zfs get -H -o value iohyve:description $pool/iohyve/$guest)"
		printf $guest'\t'$vmm'\t'$running'\t'$boot'\t'$description'\n'
	done
	) | column -t
}

# Display info about all guests. 
__info() {
	dflag="$2"
	if [ -z $dflag ]; then
		(printf 'Name\tSize\tRAM\tCPU\tOS\tLoader\n';  \
			zfs list -H -o name,volsize,iohyve:ram,iohyve:cpu,iohyve:os,iohyve:loader | \
			grep iohyve | grep -v Firmware | grep -v ISO  |  cut -d '/' -f3- | sed 1d) | column -t
	elif [ $dflag = "-d" ]; then
		(printf 'Name\tSize\tRAM\tCPU\tOS\tLoader\tDescription\n';  \
                        zfs list -H -o name,volsize,iohyve:ram,iohyve:cpu,iohyve:os,iohyve:loader,iohyve:description | \
                        grep iohyve | grep -v Firmware | grep -v ISO  |  cut -d '/' -f3- | sed 1d) | column -t
	else
		echo "Invalid flag..."
	fi
}

# List iso's
__isolist() {
	echo "Listing ISO's..."
	zfs list -H | grep iohyve/ISO | cut -f 1 | cut -d '/' -f 4 | sed 1d
}

# List Firmware
__fwlist() {
	echo "Listing Firmware..."
	zfs list -H | grep iohyve/Firmware | cut -f1 | cut -d '/' -f 4 | sed 1d
}

# Fetch ISO
__fetch() {
  local url="$2"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  local name="$(basename $2)"
  echo "Fetching $url..."
  zfs create -o mountpoint=/iohyve/ISO/$name $pool/iohyve/ISO/$name
  fetch $url -o /iohyve/ISO/$name
}

# Copy ISO from local machine
__cpiso() {
	local loc="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local name="$(basename $loc)"
	echo "Copying $name from $loc..."
	zfs create $pool/iohyve/ISO/$name
	cp $loc /iohyve/ISO/$name
}

# Rename an ISO
__renameiso() {
local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
local iso="$2"
local name="$3"
echo "Renaming ISO $2 to $3..."
mv /iohyve/ISO/$iso/$iso /iohyve/ISO/$iso/$name
zfs rename $pool/iohyve/ISO/$iso $pool/iohyve/ISO/$name
}

# Delete ISO
__deleteiso() {
  local name="$2"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  echo "Deleting $name..."
  zfs destroy $pool/iohyve/ISO/$name
}

# Fetch Firmware
__fetchfw() {
	local url="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local name="$(basename $2)"
	echo "Fetching $url..."
	zfs create -o mountpoint=/iohyve/Firmware/$name $pool/iohyve/Firmware/$name
	fetch $url -o /iohyve/Firmware/$name
}

# Copy Firmware from local machine
__cpfw() {
        local loc="$2"
        local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
        local name="$(basename $loc)"
        echo "Copying $name from $loc..."
        zfs create $pool/iohyve/Firmware/$name
        cp $loc /iohyve/Firmware/$name
}

# Rename Firmware
__renamefw() {
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local isfw="$2"
	local name="$3"
	echo "Renaming Firmware $2 to $3..."
	mv /iohyve/Firmware/$fw/$fw /iohyve/Firmware/$fw/$name
	zfs rename $pool/iohyve/Firmware/$fw $pool/iohyve/Firmware/$name
}

# Delete Firmware
__deletefw() {
	local name="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	echo "Deleting $name..."
	zfs destroy $pool/iohyve/Firmware/$name
}

# Create guest
__create() {
  local name="$2"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  local size="$3"
  local description="$(date | sed -e 's/ /_/g')"
  local guestlist="$(zfs list | grep iohyve | grep -v ISO | \
	grep -v disk | grep -v Firmware | cut -d ' ' -f 1 | cut -d '/' -f 3 | sed 1d)"
  listtaps(){
  for i in $guestlist ; do
	local tapprop="$(zfs get -H -o value iohyve:tap $pool/iohyve/$i)"
	printf $tapprop'\n'
  done
  }
  local taplast="$(listtaps | sort -V | cut -c4- | tail -n1)"
  if [ -z $taplast ]; then
	local tap='0'
  else
	local tap="$(expr $taplast + 1)"
  fi
  listcons(){
  for i in $guestlist ; do
        local conprop="$(zfs get -H -o value iohyve:con $pool/iohyve/$i)"
	printf $conprop'\n'
  done
  }
  local conlast="$(listcons | sort -V | cut -c5- | tail -n1)"
  if [ -z $conlast ]; then
	local con='0'
  else
	local con="$(expr $conlast + 1)"
  fi
  echo "Creating $name..."
  zfs create $pool/iohyve/$name
  zfs create -V $size -o volmode=dev $pool/iohyve/$name/disk0
  zfs set iohyve:name=$name $pool/iohyve/$name
  zfs set iohyve:size=$size $pool/iohyve/$name
  zfs set iohyve:ram=256M $pool/iohyve/$name
  zfs set iohyve:cpu=1 $pool/iohyve/$name
  zfs set iohyve:tap=tap$tap $pool/iohyve/$name
  zfs set iohyve:con=nmdm$con $pool/iohyve/$name
  zfs set iohyve:persist=1 $pool/iohyve/$name
  zfs set iohyve:boot=0 $pool/iohyve/$name
  zfs set iohyve:loader=bhyveload $pool/iohyve/$name
  zfs set iohyve:os=default $pool/iohyve/$name
  zfs set iohyve:autogrub='\n' $pool/iohyve/$name
  zfs set iohyve:description=$description $pool/iohyve/$name
  zfs set iohyve:bargs=-A_-H_-P $pool/iohyve/$name
}

# Install guest
__install() {
	local name="$2"
	local iso="$3"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
        # Check if guest exists
        if [ -d /iohyve/$name ]; then

                # Check to make sure guest isn't running
                local running="$(ps -ax | grep ioh-$name | grep -v grep | cut -d ' ' -f1)"
                if [ -z $running ]; then
			local ram="$(zfs get -H -o value iohyve:ram $pool/iohyve/$name)"
                	local con="$(zfs get -H -o value iohyve:con $pool/iohyve/$name)"
                	local cpu="$(zfs get -H -o value iohyve:cpu $pool/iohyve/$name)"
			local bargexist="$(zfs get -H -o value iohyve:bargs $pool/iohyve/$name)"
			local bargs="$(echo $bargexist | sed -e 's/_/ /g')"
			echo "Installing $name..."
                	# Set install prop
                	zfs set iohyve:install=yes $pool/iohyve/$name
                	# Load from CD
                	__load "$name" "/iohyve/ISO/$iso/$iso"
                	# Prepare and start guest
                	pci="$(__prepare_guest $name) ahci-cd,/iohyve/ISO/$iso/$iso"
                	local pci_args=$(__get_bhyve_cmd "$pci" )
			if [ $bargexist = '-' ]; then
	                	bhyve -c $cpu -A -H -P -m $ram $pci_args -lcom1,/dev/${con}A ioh-$name &
				echo "This version of your guest is outdated."
				echo "Please run iohyve fix-bargs guestname to update."
			else
				bhyve -c $cpu $bargs -m $ram $pci_args -lcom1,/dev/${con}A ioh-$name &
                	fi
                else
                        echo "Guest is already running."
                fi
        else
                echo "Not a valid guest name"

        fi
}

# Load guest
__load() {
	local name="$1"
	local media="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local ram="$(zfs get -H -o value iohyve:ram $pool/iohyve/$name)"
	local con="$(zfs get -H -o value iohyve:con $pool/iohyve/$name)"
	local loader="$(zfs get -H -o value iohyve:loader $pool/iohyve/$name)"
	local install="$(zfs get -H -o value iohyve:install $pool/iohyve/$name)"
	local os="$(zfs get -H -o value iohyve:os $pool/iohyve/$name)"
	local autogrub="$(zfs get -H -o value iohyve:autogrub $pool/iohyve/$name)"

	if [ $loader = "grub-bhyve" ]; then
		if [ $install = "yes" ]; then
			if [ $os = "openbsd" ]; then
				printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 /5.7/amd64/bsd.rd\nboot\n' | \
				grub-bhyve -m /iohyve/$name/device.map -r cd0 -M $ram ioh-$name
                        elif [ $os = "netbsd" ]; then
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                printf 'knetbsd -h -r cd0a /netbsd\nboot\n' | \
                                grub-bhyve -m /iohyve/$name/device.map -r cd0 -M $ram ioh-$name
                        elif [ $os = "debian" ]; then
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                printf '\n' | \
                                grub-bhyve -m /iohyve/$name/device.map -r cd0 -M $ram ioh-$name
                        elif [ $os = "centos6" ]; then
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                printf 'linux (cd0)/isolinux/vmlinuz\ninitrd (cd0)/isolinux/initrd.img\nboot\n' | \
                                grub-bhyve -m /iohyve/$name/device.map -r cd0 -M $ram ioh-$name
                        elif [ $os = "arch" ]; then
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'linux (cd0)/arch/boot/x86_64/vmlinuz archisobasedir=arch archisolabel=ARCH_'$(date +%Y%m)' ro\ninitrd (cd0)/arch/boot/x86_64/archiso.img\nboot\n' | \
                                grub-bhyve -m /iohyve/$name/device.map -r cd0 -M $ram ioh-$name
			else
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                grub-bhyve -m /iohyve/$name/device.map -r cd0 -c /dev/${con}A -M $ram ioh-$name
			fi
		elif [ $install = "no" ]; then
                        if [ $os = "openbsd" ]; then
				printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
	                        printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 -r sd0a /bsd\nboot\n' | \
	                        grub-bhyve -m /iohyve/$name/device.map -r hd0,openbsd1 -M $ram ioh-$name 
                        elif [ $os = "netbsd" ]; then
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                printf 'knetbsd -h -r sd0a /netbsd\nboot\n' | \
                                grub-bhyve -m /iohyve/$name/device.map -r hd0,msdos1 -M $ram ioh-$name
                        elif [ $os = "debian" ]; then
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                printf '\n' | \
                                grub-bhyve -m /iohyve/$name/device.map -r hd0,msdos1 -M $ram ioh-$name
                        elif [ $os = "centos6" ]; then
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                printf '\n' | \
                                grub-bhyve -m /iohyve/$name/device.map -r hd0,msdos1 -d /grub -M $ram ioh-$name
                        elif [ $os = "custom" ]; then
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                printf $autogrub | \
                                grub-bhyve -m /iohyve/$name/device.map -r hd0,msdos1 -M $ram ioh-$name
			else
                                printf '\(hd0\)\ /dev/zvol/'$pool'/iohyve/'$name'/disk0\n' > /iohyve/$name/device.map
                                printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
                                grub-bhyve -m /iohyve/$name/device.map -r hd0,msdos1 -c /dev/${con}A -M $ram ioh-$name
			fi
		fi
	else
		bhyveload -m $ram -d $media -c /dev/${con}A ioh-$name
	fi
}

# Boot guest
__boot() {
	local name="$1"
	# runmode (runonce/persist)
	#   0 = once
	#   1 = persist regular (stop if guest is powering off)
	#   2 = always persist (start again even if guest is powering off)
	local runmode="$2"
	local pci="$3"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local ram="$(zfs get -H -o value iohyve:ram $pool/iohyve/$name)"
	local con="$(zfs get -H -o value iohyve:con $pool/iohyve/$name)"
	local cpu="$(zfs get -H -o value iohyve:cpu $pool/iohyve/$name)"
	local persist="$(zfs get -H -o value iohyve:persist $pool/iohyve/$name)"
	local bargexist="$(zfs get -H -o value iohyve:bargs $pool/iohyve/$name)"
	local bargs="$(echo $bargexist | sed -e 's/_/ /g')"
        # Set install prop
        zfs set iohyve:install=no $pool/iohyve/$name

	# Generate list of bhyve -s commands for all devices
	local pci_args=$(__get_bhyve_cmd "$pci" )

	# Handle the starting of the guest inside a spawned subshell so the guest
	# can be restarted automatically if the guest reboots or crashes
	local runstate="1"
	(
		while [ $runstate = "1" ]
		do
			__load "$name" "/dev/zvol/$pool/iohyve/$name/disk0"
                        if [ $bargexist = '-' ]; then
                                bhyve -c $cpu -A -H -P -m $ram $pci_args -lcom1,/dev/${con}A ioh-$name &
				echo "This version of your guest is outdated."
				echo "Please run iohyve fix-bargs guestname to update."
                        else
                                bhyve -c $cpu $bargs -m $ram $pci_args -lcom1,/dev/${con}A ioh-$name &
                        fi
			local vmpid=$!
			wait $vmpid
			vmrc=$?
			sleep 5
			if [ $runmode == "0" ]; then
				runstate="0"
			elif [ $vmrc == "1" ] && [ $runmode != 2 ]; then
				# VM has been powered off
				runstate="0"
			else
				if [ $(zfs get -H -o value iohyve:persist $pool/iohyve/$name) != 1 ]; then
					runstate="0"
				fi
			fi
		done
		bhyvectl --destroy --vm=ioh-$name
		# Resetting the flag so that a vm which we stopped by abusing zfs set/get
		# as as an IPC mechanism is persistent again next time we start it
		if [ ! -z $persist ]; then
			zfs set iohyve:persist="$persist" $pool/iohyve/$name
		fi
	) &
}

__prepare_guest() {
	local name="$1"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local pci="$(__get_zfs_pcidev_conf $pool/iohyve/$name)"
	local tap="$(zfs get -H -o value iohyve:tap $pool/iohyve/$name)"

	# Setup tap if needed
	if [ $tap ] && [ $tap != "-" ]; then
		if [ $tap != "tap0" ]; then
			# no need to create tap0, should be installed already via README
			# check to see if tap is already created before attempting to create new tap interface
			local tapif="$('ifconfig' -a | grep $tap: | cut -c1-4)"
			if [ -z $tapif ]; then
				# create tap interface
				ifconfig $tap create
				ifconfig bridge0 addm $tap
			fi
		fi
		# Add a virtio-net pci device for the tap
		pci="virtio-net,$tap $pci"
	fi

	#Add disk as second PCI device
	pci="ahci-hd,/dev/zvol/$pool/iohyve/$name/disk0 $pci"

	#Add Hostbridge and lpc as the first PCI devices
	pci="hostbridge lpc $pci"

	# return the list of pci devices
	echo $pci
}

# Start guest (combine load and boot)
__start() {
	local name="$2"
	local flag="$3"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local pci=""
	local runmode="1"
	# Check if guest exists
	if [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running="$(ps -ax | grep ioh-$name | grep -v grep | cut -d ' ' -f1)"
		if [ -z $running ]; then
			case "$flag" in
				-s)	runmode="0"	# single - start only once
					;;
				-a) 	runmode="2"	# always - persist regardless what
					;;
				*)	runmode="1"	# persist - persists until guest is powering off
					;;
			esac
			echo "Starting $name... (Takes 15 seconds for FreeBSD guests)"
			# Prepare and boot guest
			pci="$(__prepare_guest $name)"
			__boot "$name" "$runmode" "$pci"
		else
			echo "Guest is already running."
		fi
	else
		echo "Not a valid guest name"

	fi
}

# Start a UEFI enabled bhyve instance. 
# This is experimental, use with caution. 
__uefi() {
	local name="$2"
	local media="$3"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local ram="$(zfs get -H -o value iohyve:ram $pool/iohyve/$name)"
        local con="$(zfs get -H -o value iohyve:con $pool/iohyve/$name)"
        local cpu="$(zfs get -H -o value iohyve:cpu $pool/iohyve/$name)"	
	local fw="$(zfs get -H -o value iohyve:fw $pool/iohyve/$name)"
	local tap="$(zfs get -H -o value iohyve:tap $pool/iohyve/$name)"
	local bargs="$(zfs get -H -o value iohyve:bargs $pool/iohyve/$name | sed -e 's/_/ /g')"
	# Create tap if needed
	if [ $tap != "tap0" ]; then
		# no need to create tap0, should be installed already via README
		# check to see if tap is already created before attempting to create new tap interface
		local tapif="$('ifconfig' -a | grep $tap: | cut -c1-4)"
		if [ -z $tapif ]; then
			# create tap interface
			ifconfig $tap create
			ifconfig bridge0 addm $tap
		fi
	fi
	# Make sure everything is in order...
	if [ $fw = '-' ]; then
		echo "You must set a firmware file property to use UEFI..."
	fi
	if [ -z $media ]; then
		echo "You must enter at least a zero byte ISO for some OSs..."
		echo "EX: iohyve uefi winguest null.iso"
	fi
	# Check if guest exists
        if [ -d /iohyve/$name ]; then

                # Check to make sure guest isn't running
                local running="$(ps -ax | grep ioh-$name | grep -v grep | cut -d ' ' -f1)"
                if [ -z $running ]; then
			# The good stuff...
			bhyve -c $cpu $bargs -m $ram \
			        -s 0,hostbridge \
			        -s 3,ahci-cd,/iohyve/ISO/$media/$media \
			        -s 4,ahci-hd,/dev/zvol/$pool/iohyve/$name/disk0 \
			        -s 10,virtio-net,$tap \
			        -s 31,lpc \
			        -l com1,/dev/${con}A \
			        -l bootrom,/iohyve/Firmware/$fw/$fw \
			        ioh-$name &
                else
                        echo "Guest is already running."
                fi
        else
                echo "Not a valid guest name"

        fi

}

# Gracefully stop a guest
__stop() {
  local name="$2"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  local pid="$(ps -ax | grep "ioh-" | grep $name | grep -v "grep" | cut -c1-5)"
  echo "Stopping $name..."
# zfs set iohyve:persist=0 $pool/iohyve/$name
  kill $pid
#  sleep 20
#  bhyvectl --destroy --vm=ioh-$name
}

# Gracefully shut down all guests via ACPI (Does not destroy)
__scram() {
  echo "Shutting down all guests..."
  killall bhyve
}

# Destroy guest
__destroy() {
  local name="$2"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  echo "Destroying $name..."
# zfs set iohyve:persist=0 $pool/iohyve/$name
  bhyvectl --force-poweroff --vm=ioh-$name
  bhyvectl --destroy --vm=ioh-$name
}

# Rename the guest
__rename() {
  local name="$2"
  local newname="$3"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  echo "Renaming $name to $newname..."
  zfs rename $pool/iohyve/$name $pool/iohyve/$newname
  zfs set iohyve:name=$newname $pool/iohyve/$newname
}

# Delete guest
__delete() {
  local name="$2"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  read -p "Are you sure you want to delete $name [Y/N]? " an </dev/tty
  case "$an" in
	y|Y) zfs destroy -rR $pool/iohyve/$name
	  ;;
	*) echo "Not deleted..."
	  ;;
  esac
}

# Set ZFS props
__set() {
	local name="$2"
	local propval="$3"
	local prop="$(echo $propval | cut -d '=' -f1 )"
	local sprop="$(echo $propval | cut -d '"' -f2 | sed -e 's/ /_/g')"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	echo "Setting $name prop $propval..."
	if [ $prop = "description" ]; then
		zfs set iohyve:$sprop $pool/iohyve/$name
        elif [ $prop = "bargs" ]; then
                zfs set iohyve:$sprop $pool/iohyve/$name
	else
		zfs set iohyve:$propval $pool/iohyve/$name
	fi
}

# Get ZFS props
__get() {
  local name="$2"
  local prop="$3"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  echo "Getting $name prop $prop..."
  zfs get -H -o value iohyve:$prop $pool/iohyve/$name
}

# Remove a PCIDEV property
__rmpci() {
  local name="$2"
  local prop="$3"
  local pciprop="$(echo "$prop" | grep pcidev:)"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  # Make sure it's a valid pcidev property as to not shoot foot
  if [ -z $pciprop ]; then
	echo "Not a valid PCIDEV property"
  else
	read -p "Are you sure you want to remove $prop [Y/N]? " an </dev/tty
	case "$an" in
		y|Y) zfs inherit  -r iohyve:$prop $pool/iohyve/$name
	  	;;
		*) echo "Not removed..."
	  	;;
	esac
  fi

}

# Get all ZFS props
__getall() {
	local name="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	echo "Getting $name props..."
	zfs get -H all $pool/iohyve/$name | grep iohyve: | cut -w -f2-3 | cut -c8- | column -t
}

# Fix legacy bhyve arguments
__fixbargs() {
	local name="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	echo "Setting default bargs flags for bhyve to $name..."
	zfs set iohyve:bargs=-A_-H_-P $pool/iohyve/$name	
}

# Add a new disk to guest
__add() {
  local name="$2"
  local size="$3"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  # Find the last disk number and increment one
  local lastdisk="$(zfs list -H | grep $name | grep disk | cut -d '/' -f4 | cut -f1 | \
	sort -V | cut -c5- | tail -n1)"
  local newdisk="$(expr $lastdisk + 1)"
  echo "Creating new zvol for $name..."
  zfs create -V $size -o volmode=dev $pool/iohyve/$name/disk$newdisk
  # Find the last pcidev and increment by one
  local lastpci="$(zfs get -H all $pool/iohyve/$name | grep pcidev | cut -f2 | \
	cut -d ':' -f3 | sort -V | tail -n1)"
  if [ -z $lastpci ]; then
	local newpci='1'
  else
	local newpci="$(expr $lastpci + 1)"
  fi
  zfs set iohyve:pcidev:$newpci=ahci-hd,/dev/zvol/$pool/iohyve/$name/disk$newdisk $pool/iohyve/$name
}

# Remove disk from guest
__remove() {
  local name="$2"
  local disk="$3"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  local pciprop="$(zfs get -H all $pool/iohyve/$name | grep pcidev | grep $disk | cut -f2 )"
  # Make sure it's a valid pcidev property as to not shoot foot
  if [ -z $pciprop ]; then
	echo "Not a valid PCIDEV property"
  else
	read -p "Are you sure you want to remove $disk from $name [Y/N]? " an </dev/tty
	case "$an" in
		y|Y)	zfs inherit  -r $pciprop $pool/iohyve/$name
			zfs destroy $pool/iohyve/$name/$disk
	  	;;
		*) echo "Not removed..."
	  	;;
	esac
  fi
}

# Resize a disk
__resize(){
	local name="$2"
	local disk="$3"
	local size="$4"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	# Check if guest exists
	echo "Resizing $disk to $size"
	if [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running="$(ps -ax | grep ioh-$name | grep -v grep | cut -d ' ' -f1)"
		if [ -z $running ]; then
			zfs set volsize=$size $pool/iohyve/$name/$disk 
		else
			echo "Please stop the guest first"
		fi
	else
		echo "Not a valid guest name"

	fi
}

# List disks for a guest
__disks() {
  local name="$2"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"

  zfs list -H -o name,volsize | grep -E "iohyve.*$name.*disk" | \
        cut -d '/' -f4
}

# Snapshot a guest
__snapguest() {
	local fullsnap="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local name="$(echo $fullsnap | cut -d '@' -f1)"
	echo "Taking snapshot $fullsnap"
	# Check if guest exists
	if [ -d /iohyve/$name ]; then
		zfs snap -r $pool/iohyve/$fullsnap
	else
		echo "Not a valid guest name"
	fi
}

# Rollback guest
__rollguest() {
	local fullsnap="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local name="$(echo $fullsnap | cut -d '@' -f1)"
	local snap="$(echo $fullsnap | cut -d '@' -f2)"
	local disklist="$(zfs list -H | grep iohyve | grep $name | grep disk | \
                                cut -f1 | cut -d '/' -f4-)"
	# Check if guest exists
	echo "Rolling back to $fullsnap"
	if [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running="$(ps -ax | grep ioh-$name | grep -v grep | cut -d ' ' -f1)"
		if [ -z $running ]; then
			zfs rollback -rR $pool/iohyve/$fullsnap
			for disk in $disklist ; do
				zfs rollback -rR $pool/iohyve/$name/$disk@$snap
			done
		else
			echo "Please stop the guest first"
		fi
	else
		echo "Not a valid guest name"

	fi
}

# Clone a guest
__cloneguest() {
        local name="$2"
	local cname="$3"
	local description="$(date | sed -e 's/ /_/g')"
        local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
        # Check if guest exists
        echo "Cloning $name to $cname"
        if [ -d /iohyve/$name ]; then
                # Check to make sure guest isn't running
                local running="$(ps -ax | grep ioh-$name | grep -v grep | cut -d ' ' -f1)"
                if [ -z $running ]; then
			# Take snapshot
			zfs snap -r $pool/iohyve/$name@$cname
			# zfs send that snap and desendants then receive to cname
			zfs send -R $pool/iohyve/$name@$cname | \
			zfs recv $pool/iohyve/$cname
			# clean up
			zfs destroy -rR $pool/iohyve/$name@$cname
			zfs destroy -rR $pool/iohyve/$cname@$cname
			# rename the guest
			zfs set iohyve:name=$cname $pool/iohyve/$cname
			zfs set iohyve:description=$description $pool/iohyve/$cname
                else
                        echo "Please stop the guest first"
                fi
        else
                echo "Not a valid guest name"

        fi
}

# List all the snapshots
__snaplist() {
	zfs list -H -t snap | grep iohyve | grep -v disk | cut -f1 | cut -d '/' -f3
}

# List taps in use
__taplist() {
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  local guestlist="$(zfs list | grep iohyve | grep -v ISO | grep -v disk  | grep -v Firmware | cut -d ' ' -f 1 | cut -d '/' -f 3 | sed 1d)"
  echo "Listing all network taps:"
  for i in $guestlist ; do
        conprop="$(zfs get -H -o value iohyve:tap $pool/iohyve/$i)"
        printf $i'......'$conprop'\n'
  done
}

# List active taps in use
__activetaps() {
  echo "Listing active network taps..."
  ls /dev | grep tap
}

# List consoles in use
__conlist() {
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local guestlist="$(zfs list -H | grep iohyve | grep -v ISO | grep -v disk | grep -v Firmware | sed 1d | cut -f1 | cut -d '/' -f3)"
	(
	printf 'Guest\tConsole\n'
	for guest in $guestlist; do
		local con="$(zfs get -H -o value iohyve:con $pool/iohyve/$guest)"
		printf $guest'\t'$con'\n'
	done
	) | column -t
}

# Run console (dirty pre-zfs workaround)
__console() {
  local name="$2"
  local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
  local con="$(zfs get -H -o value iohyve:con $pool/iohyve/$name)"
  echo "Starting console on $name..."
  echo "~~. to escape console [uses cu(1) for console]"
  cu -l /dev/${con}B -s 9600
}

# Reset all consoles. This kills the cu(1)
__conreset() {
  killall cu
}

# Print man page
__man() {
cat << 'EOT' | less
NAME
  iohyve(8) - bhyve manager/launcher v0.6.6 "You sed what edition"

SYNOPSIS
  iohyve version
  iohyve setup [pool]
  iohyve list
  iohyve info [-d]
  iohyve isolist
  iohyve fwlist
  iohyve fetch [URL]
  iohyve cpiso [path]
  iohyve renameiso [ISO] [newname]
  iohyve rmiso [ISO]
  iohyve fetchfw [URL]
  iohyve cpfw [path]
  iohyve renamefw [firmware] [newname]
  iohyve rmfw [firmware]
  iohyve create [name] [size]
  iohyve install [name] [ISO]
  iohyve load [name]
  iohyve boot [name] [ISO]
  iohyve start [name] [-a | -s]
  iohyve stop [name]
  iohyve scram
  iohyve destroy [name]
  iohyve rename [name] [newname]
  iohyve delete [name]
  iohyve set [name] [prop=value]
  iohyve get [name] [prop]
  iohyve rmpci [name] [pcidev:N]
  iohyve getall [name]
  iohyve add [name] [size]
  iohyve remove [name] [diskN]
  iohyve resize [name] [diskN] [size]
  iohyve disks [name]
  iohyve snap [name]@[snapshotname]
  iohyve roll [name]@[snapshotname]
  iohyve clone [name] [clonename]
  iohyve snaplist
  iohyve taplist
  iohyve activetaps
  iohyve conlist
  iohyve console [name]
  iohyve conreset
  iohyve help
  iohyve man

DESCRIPTION
  The iohyve(8) shell script utilizes the FreeBSD hypervisor bhyve(8),
  zfs(8), and nmdm(4) to make virtualization on FreeBSD easy and simple.
  Currently, only FreeBSD guests can be configured, with more on the way.
  The basic idea is to store bhyve settings in zfs user properties of zfs
  datasets that house important guest files like block devices and grub
  configurations. iohyve(8) uses the virtio drivers built into the GENERIC
  kernel for virtualization. iohyve(8) does not run out of the box. For
  starters, you will need to run 'kldload vmm' for bhyve and 'kldload nmdm'
  for the null modem device that helps you connect with  your virtual guest.
  You can run 'iohyve readme' to learn more about host configuration.

  Make sure you have enough tap devices. Only one guest per tap device.
  You can always run 'ifconfig tap1' then 'ifconfig bridge0 addm tap1'
  Then you can set the guest to use it with 'iohyve guest set tap=tap1'

OPTIONS
  version   Prints the current running version of iohyve

  setup     Installs required zfs datasets for iohyve to function.

            Usage: 'iohyve setup [poolname]' where [poolname] is the zpool
                    you want to install iohyve on.

  list      Lists the zfs dataset directorys for iohyve.

  info      Lists all the guests along with their RAM, CPU, Size, 
            OS, Loader, and Description (if -d is passed)

  isolist   Lists the installed ISOs in the /iohyve/ISO directory.

  fwlist    Lists the firmwares in the /iohyve/Firmware directory.

  fetch     Fetches installation ISO or install image and creates a
            dataset for it.

            Usage: 'iohyve fetch [URL]' where [URL] is the HTTP or FTP URL to
                    fetch from the internet.

  cpiso     Copies installation ISO or install image from your host and 
            creates a dataset for it.

            Usage: 'iohyve cpiso [path]' where [path] is the full path to
                    ISO file on the host machine. 

  renameiso Renames an ISO

            Usage: 'iohyve renameiso [ISO] [newname]' where [ISO] is the
                   name of the ISO you would like to rename. [newname]
                   is a new name.

  rmiso     Removes installed ISO from /iohyve/ISO

            Usage: 'iohyve rmiso [ISO]' where [ISO] is the name of the ISO
                    you would like to delete.

  fetchfw   Fetches firmware and creates a dataset for it.

            Usage: 'iohyve fetchfw [URL]' where [URL] is the HTTP or FTP URL to
                    fetch from the internet.

  cpfw      Copies firmware from your host and creates a dataset for it.

            Usage: 'iohyve cpfw [path]' where [path] is the full path to
                    firmware file on the host machine.

  renamefw  Renames a Firmware

            Usage: 'iohyve renamefw [firmware] [newname]' where [firmware] 
                   is the name of the firmware you would like to rename. 
                   [newname] is a new name.

  rmfw      Removes installed firmware from /iohyve/Firmware

            Usage: 'iohyve rmfw [firmware]' where [firmware] is the name of 
                    the firmware you would like to delete.

  create    Creates new guest operating system.

            Usage: 'iohyve create [name] [size]' where [name] is
                    the name you would like to use, [size] is the size of the
                    virtual block device in '16G' format where the capital G
                    signifies gigabytes.

  install   Loads and boots into ISO for guest installation.

            Usage: 'iohyve install [name] [ISO]' where [name] is the name
                    of the guest, and [ISO] is the name of the ISO you would
                    like to boot from in the form of: 'instal.iso'

  load      Loads the guest operating system bootloader and resources.

            Usage: 'iohyve load [name] [ISO]'
					where [name]    is the name of the guest operating system.
                          [bootimg] is the path to the boot medium

  boot      Boots the guest into the operating system. 'iohyve run' needs
            to be run before this is done.

            Usage: 'iohyve boot [name] [runmode] [pci]'
					where [name]    is the name of the guest operating system.
                          [runmode] describes how to start the guest:
                                    0 = start only once
                                    1 = regular persist
                                        Stop if the guest is powering off
                                    2 = always persist
                                        Always restart the guest
                          [pci]     is a space separated list of pci devices
                                    based on slot-less bhyve -s commands.
                                    Example:
                                        "ahci-hd,/path/disk.img virtio-net,tap0"
                                    Note: hostbridge and lpc are automatically
                                          added

  start     Starts the guest operating system. (Combines load & boot)

            Usage: 'iohyve start [name] [-s | -a]'
                   where [name]     is the name of the guest operating system.
                         [-s]       will cause the guest to be started once
                         [-a]       will cause the guest to always restart

  stop      Gracefully stops guest operating system.

            Usage: 'iohyve stop [name]' where [name] is the name
                    of the guest operating system.

  scram     Gracefully stop all bhyve guests. Does not destroy resources.

  destroy   Destroys guest resources.
            (Resources viewed with 'iocage vmmlist')

            Usage: 'iohyve destroy [name]' where [name] is the name
                    of the guest operating system.

  rename    Renames the guest

            Usage: 'iohyve rename [name] [newname]' where [name] is the
                    name of the guest and [newname] is the new name.

  delete    Deletes all data for the guest.

            Usage: 'iohyve delete [name]' where [name] is the name
                    of the guest operating system.

  set       Sets ZFS properties for guests one at a time

            Usage: 'iohyve set [name] [prop=value]' where [name] is the name
                    of the guest operating system.
            Properties:
                    ram=512M or ram=2G (M for megabytes, G for gigabtyes)
                    cpu=1 (number of cpu cores)
                    con=nmdm0 (where to attach null modem console)
                    tap=tap0 (tap device for virtio-net)
                    size=size of block device
                    name=name of guest
                    pcidev:[n]=[spec]
                        Generic way to add devices to the guest.
                        [n] is a generic random number or string
                        [spec] defines a virtual device added to the guest
                            by using a bhyve -s argument without the pcislot
                            or function argument. PCI slot numbers are assigned
                            automatically by iohyve.
                            Examples: "pcidev:1=passthru,2/0/0"
                                      "pcidev:2=ahci-hd,/some/place/disk.img"

  get       Gets ZFS properties for guests one at a time

            Usage: 'iohyve get [name] [prop]' where [name] is the name
                    of the guest operating system. [prop] is the
                    property you want to view. (See 'iohyve set' info)

  rmpci     Removes a pcidev from the guest

            Usage: 'iohyve rmpci [name] [pcidev:N]' where [name] is the name
                   of the guest operating system. [pcidev:N] is the PCI
                   device you want removed. Ex: 'pcidev:3'

  getall    Gets all the ZFS properties for a guest

            Usage: 'iohyve getall [name]' where [name] is the name
                    of the guest operating system.

  add       Adds a new disk to the guest.

            Usage: 'iohyve add [name] [size]' where [name] is
                    the name of the guest, [size] is the size of the
                    virtual block device in '16G' format where the capital G
                    signifies gigabytes.

  remove    Removes a disk from the guest. Cannot be disk0.

            Usage: 'iohyve remove [name] [diskN]' where [name] is
                    the name of the guest, [diskN] is the disk you would
                    like to remove from the guest. See 'iohyve disks' for
                    a list of disks for a guest 

  resize    Resizes a disk. THIS CAN BREAK THINGS ON THE GUEST.

            Usage: 'iohyve resize [name] [diskN] [size]' where [name] is
                    the name of the guest, [diskN] is the disk you would
                    like to remove from the guest, and [size] is the size 
                    of the virtual block device in '16G' format where the 
                    capital G signifies gigabytes.
                    See 'iohyve disks' for a list of disks for a guest

  disks     Lists the disks attached to a guest.

            Usage: 'iohyve disks [name]' where [name] is the name
                    of the guest operating system.

  snap      Take a snapshot of a guest. 

            Usage: 'iohyve snap [name]@[snapshot]' where [name] is the 
                    name of the guest and [snapshot] is what you would 
                    like to name the snapshot.

  roll      Rollback guest to a snapshot. 

            Usage: 'iohyve roll [name]@[snapshot]' where [name] is the
                    name of the guest and [snapshot] is what you would
                    like to name the snapshot.

  clone     Clone a guest. Note that this will clone all of the properties. 
            If you want to use the clone and the original guest at the 
            same time you will need to change the tap and nmdm properties

            Usage: 'iohyve clone [name] [clonename]' where [name] is the
                    name of the guest and [clonename] is what you would
                    like to name the new clone.

  snaplist  List all of the snapshots for all the guests. Does not show 
            snapshots of disks (they are there, though). 

  taplist   Lists all of the network taps taken by iohyve guests
            This will list taps that are not active as well.

  activetaps
            Lists all active taps in use

  conlist   Lists all of the nullmodem consoles taken by iohyve guests.
            This will list taps that are not active as well.

  console   Consoles into a guest operating system. Utilizes nmdm(4) and
            cu(1) to open a console on a guest operating system. Since
            bhyve(8) does not emulate video, so we need to administer
            the guests via a serial communication device. Since iohyve
            uses cu(1), you will need to press the tilde (~) twice
            then period (.) to exit the console.
            (Think typing ~~. real fast to exit console)

            Usage: 'iohyve console [name]' where [name] is the name
                    of the guest operating system.

  conreset  Ends all console sessions for when things get weird.

  help      General usage help.

  man       This man page.

EXAMPLES
  Setup iohyve zpool named tank:
	iohyve setup tank

  Fetch FreeBSD install ISO for later:
	iohyve fetch ftp://ftp.freebsd.org/.../10.1/FreeBSD-10.1-RELEASE-amd64-bootonly.iso

  Create a new FreeBSD guest named bsdguest on console nmdm0 with an 8Gigabyte virtual HDD:
	iohyve create bsdguest 8G

  List ISO's:
	iohyve isolist

  Install the FreeBSD guest bsdguest:
	iohyve install bsdguest FreeBSD-10.1-RELEASE-amd64-bootonly.iso

  Console into the intallation:
	iohyve console bsdguest

  Once installation is done, exit console (~~.) and destroy guest:
	iohyve destroy bsdguest

  Now that the guest is installed, it can be started like usual:
	iohyve start bsdguest

  Some guest os's (Like FreeBSD and Debian Linux Distros) can be gracefully stopped:
	iohyve stop bsdguest

  List all guests created with:
	iohyve list

  List all guests that have resources allocated using:
	iohyve vmmlist

  List all runnng guests using:
	iohvye running

  You can change guest properties by using set:
	iohyve set bsdguest ram=512M	#set ram to 512 Megabytes
	iohyve set bsdguest cpu=1	#set cpus to 1 core
	iohyve set bsdguest tap=tap0	#set tap device for ethernet
	iohyve set bsdguest con=nmdm0	#set the console to attach to

  Get a spcific guest property:
	iohyve get bsdguest ram

  Get all guest properties:
	iohyve getall bsdguest

  Install and run a Debian guest:

	iohyve create debianvm 8G		#create as usual
	iohyve set debianvm loader=grub-bhyve	#set loader option
	iohyve install debianvm deb8.1-net.iso	#install as usual
	iohyve start debianvm			#start after install is done

  Take a snapshot of a guest:

        iohyve snap bsdguest@beforeupdate	#take snapshot
        iohyve snaplist				#list snapshots
        iohyve roll bsdguest@beforeupdate	#rollback to snapshot

  Make an independent clone of a guest:

	iohyve clone bsdguest dolly		#Clone bsdguest to dolly
						#Makes an exact copy
						#Guest cannot be running

AUTHOR
  Trent -- @pr1ntf

SEE ALSO
  bhyve(8), bhyveload(4), zfs(8), nmdm(4), cu(1)
EOT
}

# Print help page
__help() {
cat << 'EOT'
iohyve  version
        setup [pool]
        list
	info [-d]
        isolist
	fwlist
        fetch [URL]
	cpiso [path]
        renameiso [ISO] [newname]
	rmiso [ISO]
        fetchfw [URL]
        cpfw [path]
        renamefw [firmware] [newname]
        rmfw [firmware]
        create [name] [size]
        install [name] [ISO]
        load [name] [path/to/bootdisk]
        boot [name] [runmode] [pcidevices]
        start [name] [-s | -a]
        stop [name]
        scram
        destroy [name]
	rename [name] [newname]
        delete [name]
        set [name] [prop=value]
        get [name] [prop]
	rmpci [name] [pcidev:N]
        getall [name]
	add [name] [size]
	remove [name] [diskN]
	resize [name] [diskN] [size]
	disks [name]
	snap [name]@[snapshotname]
	roll [name]@[snapshotname]
	clone [name] [clonename]
	snaplist
        taplist
	activetaps
	conlist
        console [name]
        conreset
        help
        man
EOT
}

__parse_cmd "$@"

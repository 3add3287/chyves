#!/bin/sh

# Copyright (c) 2015, pr1ntf (Trent Thompson) All rights reserved.
# Copyright (c) 2016, Justin D Holcomb All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Set new UUID in _UUID_GUEST_USE
__set_new_uuid_guest_use() {
	_UUID_GUEST_USE="$(/bin/uuidgen)"
}

# Creates string used to create ZFS volume for disks
__generate_zvol_disk_options_string() {
	[ "$_GDP_parameters_loaded" != 1 ] && __load_guest_default_parameters

	# Compile a variable string to be used in the ZFS volume creation
	[ "${_GDP_disk_volmode}" != "inherit" ] && local _disk_options="-o volmode=$_GDP_disk_volmode"
	[ "${_GDP_disk_volblocksize}" != "inherit" ] && local _disk_options="$_disk_options -o volblocksize=$_GDP_disk_volblocksize"
	[ "${_GDP_disk_dedup}" != "inherit" ] && local _disk_options="$_disk_options -o dedup=$_GDP_disk_dedup"
	[ "${_GDP_disk_compression}" != "inherit" ] && local _disk_options="$_disk_options -o compression=$_GDP_disk_compression"
	[ "${_GDP_disk_primarycache}" != "inherit" ] && local _disk_options="$_disk_options -o primarycache=$_GDP_disk_primarycache"
	[ "${_GDP_disk_secondarycache}" != "inherit" ] && local _disk_options="$_disk_options -o secondarycache=$_GDP_disk_secondarycache"

	echo "$_disk_options"
}

# Return the next console to use
__get_next_console() {
	local _conlast="$( zfs get -H -o value chyves:con | grep -v - | sort -V | tail -n1 | cut -c 5- )"
	if [ -z $_conlast ]; then
		local _conlast="$( __multi_chyves_zfs_property "get" "console_start_offset" "primary" ".config" )"
	else
		local _conlast="$( expr $_conlast + 1 )"
	fi
	_NEXT_console="nmdm$_conlast"
}

# Return the next tap interface to use
__get_next_tap() {
	local _taplast="$( zfs get -H -o value chyves:net_ifaces | grep -v - | tr ',' '\n' | grep tap | sort -V | tail -n1 | cut -c 4- )"
	if [ -z $_taplast ]; then
		local _tap_num="$( __multi_chyves_zfs_property "get" "tap_start_offset" "primary" ".config" )"
	else
		local _tap_num="$( expr $_taplast + 1 )"
	fi
	_NEXT_tap="tap$_tap_num"
}

# Return the next vnc port to use
__get_next_vnc_port() {
	local _vnc_port_last="$( zfs get -H -o value chyves:uefi_vnc_port | grep -v - | sort -V | tail -n1 )"
	if [ -z $_vnc_port_last ]; then
		local _vnc_port_last="$( __multi_chyves_zfs_property "get" "uefi_vnc_port_start_offset" "primary" ".config" )"
	else
		local _vnc_port_last="$( expr $_vnc_port_last + 1 )"
	fi
	_NEXT_vnc_port="$_vnc_port_last"
}

# Create guest(s)
__create() {
	local guests="$1"
	local size="$2"
	local pool="$3"
	__load_guest_default_parameters
	local creation_stamp="Created on $( date ) by chyves $_VERSION_LONG using __create()"
	local _disk_options="$( __generate_zvol_disk_options_string )"

	# If size not declared in command line, use .default's
	[ -z $size ] && local size="$_GDP_size"

	# Check on pool
	if [ -z "${pool}" ]; then
		local pool="${_PRIMARY_POOL}"
	else
		__verify_valid_pool "$pool" -c
	fi

	# Multi-guest support.
	# Eg.: chyves create guest1,guest2,guest3 8G ssd-pool
	for name in `echo "$guests" | tr ',' ' '`
	do
		__get_next_tap
		__get_next_console
		__get_next_vnc_port
		__verify_valid_guest "$name"
		__set_new_uuid_guest_use

		echo "Creating $name..."
		echo "Creating dataset on $pool"
		zfs create $pool/chyves/guests/$name
		echo "Creating $size disk0 with options: $_disk_options"
		zfs create -V $size $_disk_options $pool/chyves/guests/$name/disk0
		echo "Creating properties:"
		__multi_chyves_zfs_property "set" "bargs"       "$pool" "guests" "$name" "$_GDP_bargs"
		__multi_chyves_zfs_property "set" "cpu"         "$pool" "guests" "$name" "$_GDP_cpu"
		__multi_chyves_zfs_property "set" "fw"          "$pool" "guests" "$name" "$_GDP_fw"
		__multi_chyves_zfs_property "set" "guest_role"  "$pool" "guests" "$name" "$_GDP_guest_role"
		__multi_chyves_zfs_property "set" "loader"      "$pool" "guests" "$name" "$_GDP_loader"
		__multi_chyves_zfs_property "set" "os"          "$pool" "guests" "$name" "$_GDP_os"
		__multi_chyves_zfs_property "set" "ram"         "$pool" "guests" "$name" "$_GDP_ram"
		__multi_chyves_zfs_property "set" "rcboot"      "$pool" "guests" "$name" "$_GDP_rcboot"

		__multi_chyves_zfs_property "set" "con"         "$pool" "guests" "$name" "$_NEXT_console"
		__multi_chyves_zfs_property "set" "creation"    "$pool" "guests" "$name" "$creation_stamp"
		__multi_chyves_zfs_property "set" "description" "$pool" "guests" "$name" "-"
		__multi_chyves_zfs_property "set" "notes"       "$pool" "guests" "$name" "-"
		__multi_chyves_zfs_property "set" "net_ifaces"  "$pool" "guests" "$name" "$_NEXT_tap"
		__multi_chyves_zfs_property "set" "uuid"        "$pool" "guests" "$name" "$_UUID_GUEST_USE"

		__multi_chyves_zfs_property "set" "uefi_console_output"                  "$pool" "guests" "$name" "$_GDP_uefi_console_output"
		__multi_chyves_zfs_property "set" "uefi_mouse_type"                      "$pool" "guests" "$name" "$_GDP_uefi_mouse_type"
		__multi_chyves_zfs_property "set" "uefi_vnc_port"                        "$pool" "guests" "$name" "$_NEXT_vnc_port"
		__multi_chyves_zfs_property "set" "uefi_vnc_ip"                          "$pool" "guests" "$name" "$_GDP_uefi_vnc_ip"
		__multi_chyves_zfs_property "set" "uefi_vnc_res"                         "$pool" "guests" "$name" "$_GDP_uefi_vnc_res"
		__multi_chyves_zfs_property "set" "uefi_pause_until_vnc_client_connect"  "$pool" "guests" "$name" "$_GDP_uefi_vnc_pause"

		echo "Adding $_NEXT_tap to $_GDP_bridge"
		__network "$_GDP_bridge" join "$_NEXT_tap"
		echo "$name created."
		echo ""  # Create visual space for next multi-guest.

	done
}

# Clone a guest
__cloneguest() {
	local flag="$1"  # Only -r used to replicate, -c is arbitrary
	local name="$2"
	local clones="$3"
	local _dst_pool="$4"
	__get_pool_for_guest $name
	local _src_pool="$_GUEST_pool"

	# Verify -c or -f flag used.
	if [ "$flag" = "-c" ];then
		echo "Using the cloning method (-c) is not recommended as the UUID, tap interface, and console interface remain the same. Dragons be ahead."
		echo "It is recommended to use the replication method (-r) as these properties are regenerated."
		local _clone_type="(clone-only)"
	elif [ "$flag" = "-r" ]; then
		local _clone_type="(replication)"
	else
		__fault_detected_exit "Invalid flag used \"$flag\", valid flags are \"-c\" or \"-r\". See 'man chyves' for more information."
	fi

	# See if destination pool is declared.
	if [ -z "$_dst_pool" ]; then
		local _dst_pool=$_src_pool
	else
		__verify_valid_pool "$_dst_pool" "-c"
	fi
# Verify the guest name meets the naming requirements
__verify_correct_guest_name_format() {
	local _guest_list="$1"

	echo "Taking $name snapshot on $_src_pool name @chyves-clone-process-$_UUID_GENERAL_USE"
	zfs snap -r $_src_pool/chyves/guests/$name@chyves-clone-process-$_UUID_GENERAL_USE
	[ "$( echo "$_guest_list" | tr ',' '\n' | sort -k1 | uniq -c | sort -r -k1 | head -n1 | awk '{ printf $1; }' )" -gt 1 ] && __fault_detected_exit "Guest name repeated in command."

	# Multi-guest support.
	# Eg.: chyves clone goldenVM devteam1,devteam2,devteam3 dev-pool
	for cname in `echo "$clones" | tr ',' ' '`
	for _guest_to_check in `echo "$_guest_list" | tr ',' ' '`
	do
		echo "Cloning $name to $cname"
		echo "Verifing $cname is unused."
		__verify_valid_guest "$cname"    # Exits if name in use.

		echo "Using zfs send to send $name to $cname"
		zfs send -R $_src_pool/chyves/guests/$name@chyves-clone-process-$_UUID_GENERAL_USE | zfs recv $_dst_pool/chyves/guests/$cname

		echo "Setting creation stamp on $cname..."
		local creation_stamp="Cloned from $name on $( date ) by chyves $_VERSION_LONG using __cloneguest()"
		__multi_chyves_zfs_property "set" "creation" "$_dst_pool" "guests" "$cname" "$creation_stamp"
		# Check if guest name is forbidden
		[ -n  "$( echo "$_guest_to_check" | grep -E "$_GUEST_NAMES_FORBIDDEN_GREP_STRING" )" ] && __fault_detected_exit "\"$_guest_to_check\" name is forbidden."

		# Future use
		#__multi_chyves_zfs_property "set" "clone"       "$pool" "guests" "$name" "-"
		#__multi_chyves_zfs_property "set" "clone_assc"  "$pool" "guests" "$name" "-"
		# Check for valid guest name and length
		[ -z "$( echo "$_guest_to_check" | grep -E "^[a-zA-Z0-9_.-]{1,27}$" )" ] && __fault_detected_exit "Unsuitable name: '$_guest_to_check', must be alphanumeric between 1 and 27 characters and optionally can contain dashes '-', underscores '_', and or periods '.'."

		# Change con, tap, and UUID properties if -r is used
		if [ "$flag" = "-r" ]; then
			echo "Setting new properties as part of replication..."
			echo "Generating new UUID"
			__set_new_uuid_guest_use
			echo "Grabbing next unused tap interface"
			__get_next_tap
			echo "Grabbing next unused console interface"
			__get_next_console
			__multi_chyves_zfs_property "set" "tap" "$_dst_pool" "guests" "$cname" "$_NEXT_tap"
			__multi_chyves_zfs_property "set" "con" "$_dst_pool" "guests" "$cname" "$_NEXT_console"
			__multi_chyves_zfs_property "set" "uuid" "$_dst_pool" "guests" "$cname" "$_UUID_GUEST_USE"
		# Check if guest name in use on active pool.
		if [ -n "$( echo "$_guest_to_check" | grep -E "$_GUEST_NAMES_ALL_GREP_STRING" )" ]; then
			[ "$_DEVELOPER_MODE" != "off" ] && echo "Guest names all grep string: $_GUEST_NAMES_ALL_GREP_STRING"
			__fault_detected_exit "\"$_guest_to_check\" name already in use on system within active pools and guests."
		fi
		echo "Cloning $_clone_type from $name to $cname complete."
	done

	echo "Deleting snapshot on $_src_pool"
	if [ -z "$_src_pool" ]; then
		__fault_detected_exit "Something went wrong, \$_src_pool variable is empty. Aborting before running zfs destroy command. Please report to the chyves developers."
	else
		zfs destroy -rR $_src_pool/chyves/guests/$name@chyves-clone-process-$_UUID_GENERAL_USE
		if [ "$?" = 0 ]; then
			echo "Sucessfully deleted snapshot for clone."
		else
			echo "Unsuccessfully deleted snapshot on $_src_pool"
			echo "To delete, run this manually: zfs destroy -rR $_src_pool/chyves/guests/$name@chyves-clone-process-$_UUID_GENERAL_USE"
		fi
	fi
	echo "Sucessfully cloned $name to $clones."
}

#!/bin/sh

# Copyright (c) 2015, pr1ntf (Trent Thompson) All rights reserved.
# Copyright (c) 2016, Justin D Holcomb All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

}

}

}

# Print help page
__help() {
__version
cat << 'EOT'

chyves
  version
  setup <pool>
  list [iso|firmwares|snapshots|.config|.defaults|pools|processes|<property-name>]
  list tap active
  list .config [<pool>|primary]
  list processes [<name>]
  info [-rvstdnakgil|-h]
  iso {list|import|rename|delete} [field1] [field2]
  iso list
  iso import {http-URL|ftp-URL|local-path}
  iso rename <name> <newname>
  iso delete <name>
  firmware {list|import|rename|delete}
  firmware list
  firmware import {http-URL|ftp-URL|local-path}
  firmware rename <name> <newname>
  firmware delete <name>
  create <name> [size] [pool]
  start <name>[,<name2>[,name3]] [iso-resource]
  stop <name>
  forcekill <name>
  rename <name> <newname>
  delete <name>
  set <property1>=<value> {<name>|.defaults|.config} [<property2>=<value>]...
  set <property1>=<value> {<name1>,<name2>,<name3>} [<property2>=<value>]...
  get {<property>|all} <name>
  add [name] [size]
  remove [-f] [name] [diskN]
  resize [name] [diskN] [size]
  disks [name]
  snap <name>[@<snapshotname>]
  roll <name>[@<snapshotname>]
  clone {-c|-r} <name> <clonename> [dest-pool]
  clone {-c|-r} <name> {<clonename1>,<clonename2>,<clonename3>} [dest-pool]
  network {name} {add|remove} [-|tap{n}|vale{n}] [bridge{n}]
  network bridge{n} {add|attach|default|join|migrate|private|remove} [device{n}]
  network bridge{n} {join|unjoin} tap{n}
  network bridge{n} attach {vlan-iface{n}|physical-iface{n}|private}
  network bridge{n} {default|private}
  network bridge{n} migrate bridge{n}
  console <name> [-t]
  conreset
  help

Syntax nomenclature:
 subcommand       - Text without brackets are assumed to be required.
 [optional]       - An optional field
 [optional|list]  - An optional list, valid if not used
 {require|list}   - A require list where one option must be used
 <user-input>     - User supplied input field. Required when not contain in [ ]
 [-abcdefg]       - An optional flag field but must start with a "-" and
                    followed by any combination, in any order. (Eg: "-gca" is
                    valid.)
 name             - chyves guest name
chyves <guest>|MG|all reclaim

EOT
}

# First stage to process command line parameters for chyves
__parse_cmd_ingress() {

	# First stage of commands.
	case "_$1" in
		_dataset)      shift 1
		              __parse_cmd_dataset $@
		              exit
		;;
		_dev)         [ "$_DEVELOPER_MODE" == "off" ] && __fault_detected_exit "Developer mode is set to "off", if desired turn on by running 'chyves .config set dev_mode=on'"
		              [ "$_DEVELOPER_MODE" != "on" ] && set "$_DEVELOPER_MODE"
		               $2 "$3" "$4" "$5" "$6" "$7" "$8" "$9"           # Used for developer to test a function directly
		              [ "$_DEVELOPER_MODE" != "on" ] && set "$( echo $_DEVELOPER_MODE | sed 's/-/+/g' )"
		              exit
		;;
		_firmware)    __parse_cmd_resources $@
		              exit
		;;
		_help|_-h|_)  __help
		              exit
		;;
		_info)        __verify_number_of_arguments "1" "$#" "2"
		              __info "$2"
		              exit
		;;
		_iso)         __parse_cmd_resources $@
		              exit
		;;
		_list)        shift 1
		              __parse_cmd_list $@
		              exit
		;;
		_network)     shift 1
		              __parse_cmd_network $@
		              exit
		;;
		_version)     __verify_number_of_arguments "1" "$#"
		              __version
		              exit
		;;
	esac

	# Parameter $1 is likely a guest name - Stage 1 - create command
	if [ "$2" = "create" ]; then                                                 # Completely verified
		__root_credentials_required
		__verify_number_of_arguments "2" "$#" "4"
		__verify_correct_guest_name_format "$1"
		[ -n "$4" ] && __verify_valid_pool "$4" "-c"
		__create "$1" "$3" "$4"
		exit
	fi

	# Guest ($1) should already exists for the commands below
	__verify_guests $1

	# Parameter $1 is likely a guest name - Stage 2 - Guest exists
	case "$2" in
		clone)    __root_credentials_required                                      # Mostly verified
		          __verify_number_of_arguments "3" "$#" "5"
		          __verify_correct_guest_name_format "$3"
		          __load_one_guest_parameters "$1"
		          [ -n "$5" ] && __verify_valid_pool "$5" "-c"
		          __clone_guest "$3" "$4" "$5"
		          exit
		;;
		console)  __parse_cmd_console "$@"                                          # Completely verified
		          exit
		;;
		delete)   __root_credentials_required                                      # Mostly verified
		          __verify_number_of_arguments "2" "$#" "2"
		          __guest_delete "$1"
		          exit
		;;
		disk)     __parse_cmd_disk "$@"                                            # Mostly verified
		          exit
		;;
		get)      __verify_number_of_arguments "2" "$#" "3"
		          __get "$1" "$3"
		          exit
		;;
		set)      __root_credentials_required
		          __verify_number_of_arguments "3" "$#"
		          __set "$@"
		          exit
		;;
		start)    __root_credentials_required                                      # Mostly verified
		          __verify_number_of_arguments "2" "$#" "3"
		          [ -n "$3" ] && __verify_resource "ISO/$3"
		          __start "$1" "$3"
		          exit
		;;
		stop)     __root_credentials_required
		          __verify_number_of_arguments "2" "$#" "3"
		          [ -n "$3" ] && [ "$3" = "force" ] && __destroy_guest_vmm_resouces "$1" "$3" && exit
		          __stop_guest_gracefully "$1"
		          exit
		;;
		reclaim)  __root_credentials_required                                      # Mostly verified
		          __verify_number_of_arguments "2" "$#" "2"
		          __destroy_guest_vmm_resouces "$1"
		          exit
		;;
		rename)   __root_credentials_required
		          __verify_number_of_arguments "3" "$#" "3"
		          __verify_correct_guest_name_format "$3"
		          __load_one_guest_parameters "$1"
		          __guest_rename "$3"
		          exit
		;;
		snapshot) __parse_cmd_snapshot "$@"
		          exit
		;;
		*)        __help
		          __fault_detected_exit "Unrecognized command: $@. See above for list of correct commands and syntax."
		;;
	esac
}

# Command parser for console tasks
__parse_cmd_console() {

	# Verify/Load console kernel module (nmdm).
	if [ "$_AUTO_LOAD_KERNEL_MODS" = "yes" ]; then
		__verify_kernel_module_loaded nmdm -l      # This checks and loads the missing nmdm module.
	else
		__verify_kernel_module_loaded nmdm         # This only checks but does not load nmdm module.
	fi

	if [ -z "$3" ]; then
		__load_one_guest_parameters "$1"
	else
		__verify_guests "$1"
	fi

	# chyves $_GUEST_name console $1
	case "_$3" in
		_)        __verify_number_of_arguments "2" "$#" "2"
		          __console_run
		          exit
		;;
		_reset)   __verify_number_of_arguments "3" "$#" "3"
		          __console_reset "$1"
		          exit
		;;
		_tmux)    __verify_number_of_arguments "3" "$#" "3"
		          __verify_binary_available tmux
		          __console_tmux $1
		          exit
		;;
		_vnc)     __verify_number_of_arguments "3" "$#" "3"
		          __verify_binary_available $_VNC_CLIENT_BINARY
		          __console_vnc_client
		          exit
		;;
		*)        __help
		          __fault_detected_exit "Unrecognized syntax: $@. See above for sub-commands and syntax."
		;;
	esac
}

# Command parser for snapshots
__parse_cmd_snapshot() {
	local _single_guest="$1"
	local _arg3="$3"
	local _rollback_to_snapshot="$4"
	#local _arg3="$( echo $3 | cut -d '@' -f2 )"
	#local _rollback_to_snapshot="$( echo $4 | cut -d '@' -f2 )"
	__verify_number_of_arguments "2" "$#" "4"
	__root_credentials_required
	__load_one_guest_parameters "$_single_guest"

	# Rollback guest
	if [ "$_arg3" = "rollback" ]; then
		local _latest_snapshot="$( __return_guest_snapshot_last )"
		[ -z "$_rollback_to_snapshot" ] && local _rollback_to_snapshot="$_latest_snapshot"
		[ -z "$_rollback_to_snapshot" ] && __fault_detected_exit "No snapshots taken for $_GUEST_name"
		__verify_valid_dataset "guests/$_GUEST_name$_rollback_to_snapshot"

		[ -n "$( __return_guest_bhyve_pid )" ] && __fault_detected_exit "$_GUEST_name must be stopped before rolling back snapshot."

		__log 1 "The recursive snapshots to be deleted:"

		# List the snapshots that will be deleted by rollingback
		for _dataset in `zfs list -H -t volume,filesystem -r -o name $_GUEST_pool/chyves/guests/$_GUEST_name | tr '\n' ' '`
		do
			zfs list -H -d 1 -t snapshot -o name $_dataset | grep -A999999 -w "$_dataset$_rollback_to_snapshot" | grep -v -w "$_dataset$_rollback_to_snapshot" | cut -d'/' -f4- | awk '{ print "   "$1 }'
		done

		read -p "[WARNING] Do you want to delete all data created after the snapshot including the recursive snapshot above: [y/N]? " _delete_or_no </dev/tty

		case "$_delete_or_no" in
			y|Y|yes)  # Send to backend
			          __rollback_guest_snapshot "$_rollback_to_snapshot"
			;;
			*) __log 1 "$_GUEST_name was not rolled back."
		esac
		exit

	# Delete a guest's snapshot
	elif [ "$_arg3" = "delete" ]; then
		__verify_number_of_arguments "3" "$#" "4"
		local _snapshot_name="$4"
		[ -z "$_snapshot_name" ] && local _snapshot_name="$( __return_guest_snapshot_last )"
		[ -z "$_snapshot_name" ] && __fault_detected_exit "No snapshots taken for $_GUEST_name"

		# Verify snapshots exists and split if a range is specified.
		# Using this method allows deleting non-top level guest snapshots, such as the ones created for clones.
		zfs destroy -rnv $_GUEST_pool/chyves/guests/$_GUEST_name$_snapshot_name > /dev/null 2>&1
		if [ "$?" != 0 ]; then
			__fault_detected_exit "Invalid snapshot name."
		else

			# Print the snapshots to be destroyed. The '-n' flag is to do a dry-run ("No-op").
			__log 1 "The recursive snapshots to be deleted:"
			zfs destroy -rnv $_GUEST_pool/chyves/guests/$_GUEST_name$_snapshot_name
		fi

		read -p "[WARNING] Do you want to delete the above snapshots: [y/N]? " _delete_or_no </dev/tty
		case "$_delete_or_no" in
			y|Y|yes)  # Send to backend
			          __destroy_guest_snapshot "$_snapshot_name"
			;;
			*) __log 1 "$_GUEST_pool/chyves/guests/$_GUEST_name$_snapshot_name was not destroyed."
		esac
		exit

	# Take snapshot of guest
	elif [ -z "$_arg3" ] || [ -n "$( echo "$_arg3" | grep -E '^@' )" ]; then
		local _snapshot_name="$_arg3"

		# Give generic name when not supplied.
		[ -z "$_snapshot_name" ] && local _snapshot_name="@chyves-auto-named-snapshot-$_DATE_YMDMHS"

		# Run input verification
		[ -z "$( echo "$_snapshot_name" | grep -E '^\@[-0-9a-zA-Z._]{1,}$' )" ] && __fault_detected_exit "Incorrect snapshot name format. Must start with an '@' and can contain number, letters, dashes '-', periods '.', and/or underscores '_'."

		# Append a message indicating system was running when bhyve pid detected.
		[ -n "$( __return_guest_bhyve_pid )" ] && local _snapshot_name="${_snapshot_name}-LIVE-SYSTEM"

		# Send to backend
		__snapshot_guest "$_snapshot_name"
		exit

	else
		__help
		__fault_detected_exit "Unknown snapshot command."
	fi
}

# Checks to see if running with root credentials is required.
__root_credentials_required() {

	# See if running with root credentials. -u flag for id 'Display the effective user ID as a number.'
	[ "$( id -u )" != 0 ] && __fault_detected_exit "'$@' command requires root credentials!"
}

# Show version
__version() {
	__log 1 "chyves ${_VERSION_LONG}"
}

#!/bin/sh

# Copyright (c) 2015, pr1ntf (Trent Thompson) All rights reserved.
# Copyright (c) 2016, Justin D Holcomb All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# List various aspects of chyves guests, properties, and other resources
__list() {
	local output_type="$1"
	local _arg2="$2"         # Used for tap and processes

	# Lists the traditional output
	if [ -z "${output_type}" ]; then

		local pools=$( __get_pool_names )
		(
		printf "%s^%s^%s^%s^%s^%s\n" "Guest" "VMM" "Running" "rcboot" "Pool" "Description"
		for pool in $pools; do
			local guests="$( __get_guests_list - $pool )"
			for g in $guests; do
				local _vmm_status=$( __check_vmm_alocated $g -h  )
				local _bhyve_status=$( __check_bhyve_process_running $g -h )
				local _rcboot_priority=$( __display_rcboot_priority $pool $g )
				local description="$( __multi_chyves_zfs_property "get" "description" "$pool" "guests" "$g" )"
				printf "%s^%s^%s^%s^%s^%s\n" "$g" "$_vmm_status" "$_bhyve_status" "$_rcboot_priority" "$pool" "$description"
			done
		done
		) | column -ts^

	# Dynamically lists the guest chyves properties
	elif [ "${output_type}" = "properties" ]; then
		echo "Use the following syntax to display of list of the guests on the system and a property."
		echo "These are the available properties: "
		__get_property_list
		echo "Run 'chyves list <property>' to see what that property is for each guest."

	# List ISO firmware resources.
	elif [ "${output_type}" = "iso" ]; then
		local pool=$_PRIMARY_POOL
		echo "Listing ISOs..."
		zfs list -H -r $pool/chyves/ISO | cut -f 1 | cut -d '/' -f 4 | sed 1d

	# List Firmware resources. Using "firmware" lists the property firmware rather than the resource
	elif [ "${output_type}" = "firmwares" ]; then
		echo "Listing Firmware..."
		zfs list -H -r $pool/chyves/Firmware | cut -f1 | cut -d '/' -f 4 | sed 1d

	# List snapshots
	elif [ "${output_type}" = "snapshots" ]; then
		echo "Listing snapshots..."
		zfs list -H -t snapshot | grep chyves/guests | grep -v ".defaults" | cut -f1 | cut -d '/' -f4- | sed '/^$/d'

	# List properties set in .config
	elif [ "${output_type}" = ".config" ]; then
		local _pool=$arg2

		echo "Listing properties set in .config"
		[ "$_arg2" = "primary" ] && _pool=$_PRIMARY_POOL

		if [ -n "${_pool}" ]; then
			(
			echo -e "Property:\t Value:"
			zfs get -r -t filesystem -o property,value all $_pool/chyves/.config | grep chyves: | sed -e 's/chyves://g'
			) | column -t
		else
			(
			echo -e "Dataset:\t Property:\t Value:"
			( zfs get -r -t filesystem -o name,property,value all | grep chyves/.config | grep chyves: | sed -e 's/chyves://g' | sed -e 's/\/chyves\/\.config//g' ) | sort -k2
			) | column -t
		fi

	# List pools and roles
	elif [ "${output_type}" = "pools" ]; then
		local _pools=$( __get_pool_names -a )
		(
			printf "%s^%s\n" "Pool:" "Role:"
			for _pool in $_pools; do
				local _dataset_role=$( zfs get -H -o value chyves:dataset_role $_pool/chyves/.config )
				printf "%s^%s\n" "$_pool" "$_dataset_role"
			done
		) | sort -k1 | column -ts^

	# List properties set in .defaults
	elif [ "${output_type}" = ".defaults" ]; then
			echo -e "Properties:\t     defaults:"
			zfs get -r -t filesystem -o property,value all $_PRIMARY_POOL/chyves/guests/.defaults | grep chyves: | sed -e 's/chyves://g' | sort -k1

	# List processes
	elif [ "${output_type}" = "processes" ]; then
		local _guest_name=$_arg2

		echo "Listing processes..."
		if [ -z "$_guest_name" ]; then
			ps -aux | grep -E "chy-|chyves|bhyveload|grub-bhyve" | grep -v -E "grep -E chy-|/bin/sh /usr/local/sbin/chyves list"
		else
			__get_pool_for_guest "$_guest_name"
			ps -aux | grep ${_guest_name} | grep -E -v "grep ${_guest_name}|/bin/sh /usr/local/sbin/chyves list"
		fi

	# List bridges
	elif [ "${output_type}" = "bridges" ]; then
		__get_bridge_list_on_chyves
		local _bridges="$_BRIDGE_list_on_chyves"

		for b in $_bridges
		do
			echo "Bridge: $b"

			# Get outside interface for this bridge
			local _phy=$( __multi_chyves_zfs_property "get" "${b}_phy_attach" "primary" ".config" )
			[ "$_phy" = "-" ] && __fault_detected_exit "Bridge not associated with physical or vlan interface, or set to \"private\". \nPlease run: chyves network $b attach {iface} \n        Or: chyves network $b private"
			__verify_valid_iface_format $_phy
			if [ "$_IFACE_type" = "private" ]; then
				echo "       Private network, no outside connectivity."
			else
				echo "       $_IFACE_type interface: "
				echo "             $_phy"
			fi

			# Get taps for this bridge
			__get_tap_list_for_bridge_on_chyves $b
			echo "       taps: "
			for pat in $_TAP_list_for_bridge_on_chyves
			do
			echo "             $pat"
			done
		done
		exit

	# Lists a property for all active guests. See "chyves list properties" for options
	elif [ -n $( __get_property_list | grep "$output_type " ) ]; then

		# Displays active tap via /dev
		if [ "$output_type" = "tap" ] && [ "${_arg2}" = "active" ]; then
			echo "Listing active network taps..."
			ls /dev | grep tap
			exit
		fi

		# Displays singular property
		(
		printf 'Guest\t'$output_type'\n'
		local poollist=$( __get_pool_names -a )
		for pool in $poollist; do
			local guestlist=$( __get_guests_list - $pool )
			for guest in $guestlist; do
				local property="$( zfs get -H -o value chyves:${output_type} $pool/chyves/guests/$guest )"
				printf $guest'\t'$property'\n'
			done
		done
		) | column -t
	fi
}

# Display info about all guests.
__info() {
	local flags="$1"

	if [ "$flags" = "-h" ] || [ -n "$(echo "$flags" | grep 'g' | grep 'i')" ]; then
cat << 'EOT'

    chyves info

Displays information about chyves guests. Without the use of flags, each guest's
name, disks, size, CPU count, RAM allotment, and respective pool are displayed.
The following flags are used in combination to display more fields than the
default. These flags are used in combination meaning the correct syntax is
"-rvs" rather than "-r -v -s". See below for a description of what each flag
does:

 Flags to controls which fields are displayed:
  -r    [role] Display what role the dataset is set to.
  -v    [verbose] Display OS, loader, tap, and console port.
  -s    [status] Display VMM status, if bhyve instance running, and if the
        rcboot is set.
  -t    [template] Displays if guest is a template.
  -d    [description] Dispays description property.
  -n    [notes] Dispays notes property.
  -a    [all] Display all fields above.

 Flags to controls which guests are display or their disks:
  -k    [no-disks] Do not display guests' disks.
  -g    [all-guests] Display all guests (Even offline and templates).
  -i    [inactive] Display only templates and guests on pools with property
        dataset_role set to offline. Incompatiable with the -g flag.

 Miscellaneous flags:
  -h    [help] Display this message.
  -l    [less] Pipes the output to less.

EOT

	# These two flags options are competitive, exit with a warning.
	[ -n "$(echo "$flags" | grep 'g' | grep 'i')" ] && __fault_detected_exit "The -g and -i flags for 'chyves info' are incompatiable. All other flags combinations are fine."

		exit
	fi

	# Poll to see what pools have active guests
	# or the '-g' flag for all guests
	# or the '-i' flag for offline and templates
	if [ -n "$(echo "$flags" | grep 'i')" ]; then
		local pools=$( __get_pool_names -a | grep -E "$_OFFLINE_POOLS_GREP_STRING|$_TEMPLATE_GUESTS_GREP_STRING" )
	elif [ -n "$(echo "$flags" | grep -E 'g|a' )" ]; then
		local pools=$( __get_pool_names -a )
	else
		local pools=$( __get_pool_names )
	fi

	( # Begining of very large table of output.
	# Print common header
	printf "%s^%s^%s^%s^%s" "Guest" "Size" "CPU" "RAM" "Pool"

	# Print headers for -r flag
	[ -n "$(echo "$flags" | grep -E 'r|a')" ] && printf "^%s" "Dataset Role"

	# Print headers for -v flag
	[ -n "$(echo "$flags" | grep -E 'v|a')" ] && printf "^%s^%s^%s^%s" "OS" "Loader" "net-ifaces" "Con"

	# Print headers for -s flag
	[ -n "$(echo "$flags" | grep -E 's|a')" ] && printf "^%s^%s^%s" "VMM" "Running" "rcboot"

	# Print headers for -t flag
	[ -n "$(echo "$flags" | grep -E 't|a')" ] && printf "^%s" "Template"

	# Print headers for -d flag
	[ -n "$(echo "$flags" | grep -E 'd|a')" ] && printf "^%s" "Description"

	# Print headers for -n flag
	[ -n "$(echo "$flags" | grep -E 'n|a')" ] && printf "^%s" "Notes"

	# Print new line for first guest.
	printf "\n"

	# Spider through pools
	for pool in $pools; do
		# Poll to see which guests are on $pool
		# This is required for showing inactive guests as __get_guests_list normally omits these guests
		[ -n "$(echo "$flags" | grep -E 'g|i')" ] && local _do_not_omit_inactive=a
		if [ -n "$(echo "$flags" | grep 'k')" ]; then
			local guests="$( __get_guests_list -${_do_not_omit_inactive} $pool )"
		else
			# Default is to display disks.
			local guests="$( __get_guests_list -d${_do_not_omit_inactive} $pool )"
		fi

		local dataset_role=$( zfs get -H -o value chyves:dataset_role $pool/chyves/.config )

		# Spider through guests
		for g in $guests; do

			# Poll variables for size. Use chyves property for guest and volsize for disks.
			if [ -z "$(echo "$g" | grep -E -v 'disk')" ]; then
				local size="$( zfs get -H -o value volsize $pool/chyves/guests/$g )"
			else
				local size="$( zfs get -H -o value usedbychildren $pool/chyves/guests/$g )"
			fi

			# Poll remaining variables for common section
			local cpu="$( __multi_chyves_zfs_property "get" "cpu" "$pool" "guests" "$g" )"
			local ram="$( __multi_chyves_zfs_property "get" "ram" "$pool" "guests" "$g" )"

			# Print common section (guest, size, cpu, raml)
			printf "%s^%s^%s^%s^%s" "$g" "$size" "$cpu" "$ram" "$pool"

			# Print dataset role section
			[ -n "$(echo "$flags" | grep -E 'r|a')" ] && printf "^%s" "$dataset_role"

			# Get variable and print for verbose section (os, loader, tap, con)
			if [ -n "$(echo "$flags" | grep -E 'v|a')" ]; then
				local os="$(zfs get -H -o value chyves:os $pool/chyves/guests/$g)"
				local loader="$(zfs get -H -o value chyves:loader $pool/chyves/guests/$g)"
				local tap="$(zfs get -H -o value chyves:net_ifaces $pool/chyves/guests/$g)"
				local con="$(zfs get -H -o value chyves:con $pool/chyves/guests/$g)"

				printf "^%s^%s^%s^%s" "$os" "$loader" "$tap" "$con"
			fi

			# Get information, set variables, and print for status section (VMM, Running, rcboot)
			if [ -n "$(echo "$flags" | grep -E 's|a')" ]; then
				local _vmm_status=$( __check_vmm_alocated $g -h  )
				local _bhyve_status=$( __check_bhyve_process_running $g -h )
				local _rcboot_priority=$( __display_rcboot_priority $pool $g )

				printf "^%s^%s^%s" "$_vmm_status" "$_bhyve_status" "$_rcboot_priority"
			fi

			# Get template information
			if [ -n "$(echo "$flags" | grep -E 't|a')" ]; then
				local template="$(zfs get -H -o value chyves:template $pool/chyves/guests/$g)"
				if [ $template = 'template' ]; then
					template="YES"
				else
					template="NO"
				fi

				printf "^%s" "$template"
			fi

			# Print description if flag set
			if [ -n "$(echo "$flags" | grep -E 'd|a')" ]; then
				local description="$(zfs get -H -o value chyves:description $pool/chyves/guests/$g)"
				printf "^%s" "$description"
			fi

			# Print notes property if flag set
			if [ -n "$(echo "$flags" | grep -E 'n|a')" ]; then
				local notes="$(zfs get -H -o value chyves:notes $pool/chyves/guests/$g)"
				printf "^%s" "$notes"
			fi

			# Print new line for next guest.
			printf "\n"
	  done
	done
	) | column -ts^ | \
	(
		if [ -n "$(echo "$flags" | grep 'l')" ]
		then
			less
		else
			cat
		fi
	)
}

# List disks for a guest
__disks() {
	local name="$1"
	__get_pool_for_guest "$name"
	local dataset="${_GUEST_pool}/chyves/guests/${name}"
	(
	echo "Listing disks for $name..."
	printf "diskN\tSize\n"
	zfs list -H -o name,volsize | grep -E "chyves.*$name.*disk" | \
		cut -d '/' -f4
	) | column -t
}

#!/bin/sh

# Copyright (c) 2016, Justin D Holcomb All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Exits if tap is locked by a guest
__exit_if_tap_locked() {
	local _tap="$1"
	__get_pid_locking_tap $_tap
	if [ -n "$_PID_locking_tap" ]; then
		__get_guest_name_by_pid $_PID_locking_tap
		__fault_detected_exit "$_tap belongs to $_GUEST_name_by_pid which is still running, stop the guest before making network changes."
	fi
}

# Get bridge members on system
__get_bridge_members_on_system() {
	local _bridge="$1"
	_BRIDGE_members_on_system=$( ifconfig $_bridge | grep member | cut -d' ' -f2 )
}

# Get outside interface for bridge
__get_bridge_phy_iface_chyves() {
	local _bridge="$1"
	_BRIDGE_phy_iface_chyves=$( __return_chyves_zfs_property_value "${_bridge}_phy_attach" "global" | tr ',' '\n' )

	if [ $_BRIDGE_phy_iface_chyves = "-" ]; then
		__fault_detected_exit "Outside interface not configured for $_bridge. Please set to 'private' if no vlan or physical interface is going to be attached."
	fi
}

# Get a list of bridges on chyves
__get_bridge_list_on_chyves() {
	_BRIDGE_list_on_chyves=$( zfs get -H -o property all $_PRIMARY_POOL/chyves/.config | grep chyves:bridge | grep _tap_members | cut -d':' -f2 | cut -d'_' -f1 | uniq )
}

# Get a tap's bridge membership as set in .config as a chyves properties
__get_parent_bridge_for_tap_chyves() {
	local _tap="$1"
	local _flag="$2"
	_PARENT_bridge_for_tap_chyves=$( zfs get -H -o property,value all $_PRIMARY_POOL/chyves/.config | grep -E chyves:bridge | grep $_tap | cut -d':' -f2 | cut -d'_' -f1 )

	if [ -z "$_PARENT_bridge_for_tap_chyves" ]; then
		if [ -z "$_flag" ]; then
			__fault_detected_exit "$_tap not found to be configured in chyves for a bridge interface. Please add to a bridge: 'chyves network bridge{n} add $_tap'"
		fi
	fi
}

# Get a list of interfaces on system
__get_iface_list_on_system() {
	local _type="$1"    # vlan|bridge|tap|<kernel-drv>|$null
	local _omit='lo'    # | separated list

	if [ -z "$_type" ]; then
		_IFACE_list_on_system=$( ifconfig -l | tr ' ' '\n' | grep -E -v "$_omit" )
	else
		_IFACE_list_on_system=$( ifconfig -l | tr ' ' '\n' | grep -E -v "$_omit" | grep "$_type" )
	fi
}

# Get a tap's guest membership
__get_parent_guest_for_tap_chyves() {
	local _tap="$1"
	_PARENT_guest_for_tap_chyves="$( zfs get -H -d 3 -o name,property,value chyves:net_ifaces | grep chyves/guests/ | grep -v -E "$_OFFLINE_POOLS_GREP_STRING|$_TEMPLATE_GUESTS_GREP_STRING" | grep $_tap | cut -f1 | cut -d'/' -f4 )"

	if [ -z "$_PARENT_guest_for_tap_chyves" ]; then
		__fault_detected_exit "$_tap not found to be configured in chyves for a bridge interface. Please add to a bridge: 'chyves network bridge{n} add $_tap'"
	fi
}

# Get PID on tap
__get_pid_locking_tap() {
	local _tap="$1"
	_PID_locking_tap=$( ifconfig $_tap | grep "Opened by PID" | cut -d' ' -f4 )
}

# Get a list of taps on a bridge in chyves properties
__get_tap_list_for_bridge_on_chyves() {
	local _bridge="$1"
	_TAP_list_for_bridge_on_chyves=$( __return_chyves_zfs_property_value "${_bridge}_tap_members" "global" | tr ',' '\n' )
}

# Network sub-command
__network() {
	local _device="$1"
	local _action="$2"
	local _dev2="$3"
	local _bridge="$4"     # Used only for "add"

	# Verify $_device as bridge when not adding tap/vale to guest.
	if [ "$_action" = "remove" ] || [ "$_action" = "add" ]; then
	else
		__verify_valid_iface_format "$_device"
		local _device_type="$_IFACE_type"
	fi

	# Check that the supplied dev2 name can be a network device
	if [ -n "$_dev2" ] && [ "$_dev2" != "-" ]; then
		__verify_valid_iface_format "$_dev2"
		local _dev2_type="$_IFACE_type"
	fi

	## Begin action execution:
	#
	# Used to associate a bridge with a physical or vlan interface interface
	if [ "$_action" = "attach" ]; then
		[ "$_device_type" != "bridge" ] || [ "$_dev2_type" != "vlan" ] && [ "$_dev2_type" != "physical" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network bridge{n} attach {<physical-iface{n}>|<vlan-iface{n}>'."
		local _exist_check=$( zfs get -H -o source chyves:"${_device}_phy_attach" child-middle/chyves/.config )

		if [ "$_exist_check" != "local" ]; then
			__verify_valid_system_iface "$_device" -c
		fi

		__multi_chyves_zfs_property "set" "${_device}_phy_attach" "primary" ".config" "-" "$_dev2"
		__network_add_dev_to_bridge "$_device" "$_dev2"
	#
	# Add tap/vale interface to guest
	elif [ "$_action" = "add" ]; then

		# Populate tap interface variable if blank or "-"
		if [ -z "$_dev2" ] || [ "$_dev2" = "-" ]; then
			__get_next_tap
			local _dev2="$_NEXT_tap"
		fi

		# Verify tap/vale interface
		__verify_valid_iface_format "$_dev2"
		local _dev2_type="$_IFACE_type"

		# Do not allow tap to be join if used elsewhere
		[ "$_dev2_type" = "tap" ] && __verify_tap_not_in_use $_dev2

		# If $_dev2 is not a vale or tap exit
		[ "$_dev2_type" != "vale" ] && [ "$_dev2_type" != "tap" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network {name} add [tap{n}|vale{n}[:{p}]] [bridge{n}]'."

		# Swap parameters around
		local _guest="$_device"

		__get_pool_for_guest $_guest
		__verify_valid_guest $_guest $_GUEST_pool

		# If bridge parameter not supplied use value from .defaults otherwise swap direct into $_device
		if [ -z "$_bridge" ]; then
			__load_guest_default_parameters
			local _device="$_GDP_bridge"
		else
			local _device="$_bridge"
		fi

		# Verify $_device (now a bridge)
		__verify_valid_iface_format "$_device"
		local _device_type="$_IFACE_type"

		[ "$_device_type" != "bridge" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network {name} add [tap{n}|vale{n}[:{p}]] [bridge{n}]'."

		local _guest_tap_config=$( __multi_chyves_zfs_property "get" "net_ifaces" "$_GUEST_pool" "guests" "$_guest" )

		# For tap interfaces join the tap to a bridge in chyves
		[ "$_dev2_type" = "tap" ] && __network "$_device" "join" "$_dev2"

		# Set variable for new tap configuration
		if [ "$_guest_tap_config" = "-" ] || [ "$_guest_tap_config" = "" ]; then
			local _guest_tap_config="$_dev2"
		else
			local _guest_tap_config=$( echo "${_guest_tap_config},$_dev2" )
		fi

		# Set tap string as chyves property
		__multi_chyves_zfs_property "set" "net_ifaces" "$_GUEST_pool" "guests" "$_guest" "$_guest_tap_config"
	#
	# Remove tap/vale interface from guest
	elif [ "$_action" = "remove" ]; then

		# Verify tap/vale interface
		__verify_valid_iface_format "$_dev2"
		local _dev2_type="$_IFACE_type"

		# If $_dev2 is not a vale or tap exit
		[ "$_dev2_type" != "vale" ] && [ "$_dev2_type" != "tap" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network {name} remove [tap{n}|vale{n}[:{p}]] [bridge{n}]'."

		# Swap parameters around
		local _guest="$_device"

		__get_pool_for_guest $_guest
		__verify_valid_guest $_guest $_GUEST_pool

		# Check guest is not running
		[ -n "$( __check_bhyve_process_running $_guest )" ] && __fault_detected_exit "$_guest currently running, please stop guest before removing network interface."

		if [ "$_dev2_type" = "tap" ]; then
			# Get bridge to remove tap from
			__get_parent_bridge_for_tap_chyves $_dev2
			local _device="$_PARENT_bridge_for_tap_chyves"

			# Verify $_device (now a bridge)
			__verify_valid_iface_format "$_device"
			local _device_type="$_IFACE_type"

			[ "$_device_type" != "bridge" ] && __fault_detected_exit "Incorrect syntax used, incorrect bridge device used ($_device)."

			# Unjoin the tap from the bridge in chyves
			[ "$_dev2_type" = "tap" ] && __network "$_device" "unjoin" "$_dev2"
		fi

		local _guest_tap_config=$( __multi_chyves_zfs_property "get" "net_ifaces" "$_GUEST_pool" "guests" "$_guest" )

		# Set variable for new tap configuration
		if [ -z "$_guest_tap_config" ]; then
			local _guest_tap_config="-"
		else
			# Expand string from comma separated, remove intended device, compress string back to comma separated.
			local _guest_tap_config=$( echo "${_guest_tap_config}" | tr ',' '\n' | grep -v $_dev2 | tr '\n' ',' | sed -e 's/,$//g' )
			[ -z "$_guest_tap_config" ] && local _guest_tap_config="-"
		fi

		# Set tap string as chyves property
		__multi_chyves_zfs_property "set" "tap" "$_GUEST_pool" "guests" "$_guest" "$_guest_tap_config"
	#
	# Create and set a bridge in private mode (aka no physical/vlan interface)
	elif [ "$_action" = "private" ]; then
		[ "$_device_type" != "bridge" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network bridge{n} private'."
		local _exist_check=$( zfs get -H -o source chyves:"${_device}_phy_attach" child-middle/chyves/.config )

		if [ "$_exist_check" != "local" ]; then
			__verify_valid_system_iface "$_device" -c
		fi
	#
	# Set the default bridge for newly created guest's tap interface
	elif [ "$_action" = "default" ]; then
		[ "$_device_type" != "bridge" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network bridge{n} default'."
		__multi_chyves_zfs_property "set" "bridge" "primary" "guests" ".defaults" "$_device"
	#
	# Join a tap device to a bridge membership
	elif [ "$_action" = "join" ]; then
		[ "$_device_type" != "bridge" ] || [ "$_dev2_type" != "tap" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network bridge{n} add tap{n}'."
		local _bridge_config_membership=$(  __multi_chyves_zfs_property "get" "${_device}_tap_members" "primary" ".config" )

		# Do not allow tap to be join if used elsewhere
		[ "$_dev2_type" = "tap" ] && __verify_tap_not_in_use $_dev2

		if [ "$_bridge_config_membership" = "-" ]; then
			__multi_chyves_zfs_property "set" "${_device}_tap_members" "primary" ".config" "-" "$_dev2"
			__verify_valid_system_iface $_dev2 -c
			__network_add_dev_to_bridge $_device $_dev2
		elif [ -n "$( echo "$_bridge_config_membership" | grep -w "$_dev2" )" ]; then
			__fault_detected_exit "$_dev2 is already a memeber of $_device"
		else
			local _bridge_config_membership=$( echo "${_bridge_config_membership},$_dev2" )
			__multi_chyves_zfs_property "set" "${_device}_tap_members" "primary" ".config" "-" "$_bridge_config_membership"
			__verify_valid_system_iface $_dev2 -c
			__network_add_dev_to_bridge $_device $_dev2
		fi
	#
	# Unjoin a tap device from a bridge membership
	elif [ "$_action" = "unjoin" ]; then
		[ "$_device_type" != "bridge" ] || [ "$_dev2_type" != "tap" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network bridge{n} remove tap{n}'."
		local _bridge_config_membership=$(  __multi_chyves_zfs_property "get" "${_device}_tap_members" "primary" ".config" )

		# Do not allow tap to be moved while guest is running
		__exit_if_tap_locked $_dev2

		if [ "$_bridge_config_membership" = "-" ]; then
			__fault_detected_exit "No members of $_device configured for chyves."
		elif [ -z "$( echo "$_bridge_config_membership" | grep "$_dev2" )" ]; then
			__fault_detected_exit "$_dev2 is not configure in chyves a member of $_device."
		else

			# Expand string from comma separated, remove intended device, compress string back to comma separated.
			local _bridge_config_membership=$( echo "${_bridge_config_membership}" | tr ',' '\n' | grep -v $_dev2 | grep -v -E "^$" | tr '\n' ',' | sed -e 's/,$//g' )

			# Populate an empty $_bridge_config_membership with "-" as this is the empty indicator
			[ -z "$_bridge_config_membership" ] && local _bridge_config_membership="-"

			# Set chyves property
			__multi_chyves_zfs_property "set" "${_device}_tap_members" "primary" ".config" "-" "$_bridge_config_membership"

			#
			__network_remove_dev_to_bridge $_device $_dev2
		fi
	#
	# Migrates chyve devices on a bridge to another bridge and sets properties as necessary
	elif [ "$_action" = "migrate" ]; then
		[ "$_device_type" != "bridge" ] || [ "$_dev2_type" != "tap" ] && __fault_detected_exit "Incorrect syntax used. Must use: 'chyves network bridge{n} rename bridge{n}'."
		local _bridge_config_membership=$(  __multi_chyves_zfs_property "get" "${_device}_tap_members" "primary" ".config" )
		local _future_bridge_config_membership=$(  __multi_chyves_zfs_property "get" "${_dev2}_tap_members" "primary" ".config" )
		local _bridge_phy=$( __multi_chyves_zfs_property "get" "${_device}_phy_attach" "primary" ".config" )

		[ "$_future_bridge_config_membership" != "-" ] && echo "Merging $_device devices with device present on $_dev2 ($_future_bridge_config_membership)"

		if [ "$_bridge_config_membership" != "-" ]; then
			echo "Removing each tap from $_device ($_bridge_config_membership)"
			for _tap_to_remove in `echo $_bridge_config_membership | tr ',' '\n'`
			do
				__exit_if_tap_locked $_tap_to_remove
				__network_remove_dev_to_bridge "$_device" $_tap_to_remove
			done
		fi

		if [ -n "$_bridge_phy" ]; then
			echo "Removing $_bridge_phy from $_device"
			__network_remove_dev_to_bridge "$_device" $_bridge_phy
		fi

		echo "Setting taps from $_device to $_dev2"
		__multi_chyves_zfs_property "set" "${_dev2}_tap_members" "primary" ".config" "-" "$_bridge_config_membership"
		[ "$_GDP_parameters_loaded" != 1 ] && __load_guest_default_parameters

		# If the bridge name is the same as the .defaults one, update it too.
		if [ "$_GDP_bridge" = "$_device" ]; then
			echo "Updating default bridge for newly created guests in .defaults."
			__multi_chyves_zfs_property "set" "bridge" "primary" "guests" ".defaults" "$_dev2"
			__load_guest_default_parameters
		fi

		for _tap_to_add in `echo "$_bridge_config_membership,$_future_bridge_config_membership" | tr ',' '\n' | grep -E [:space:]`
		do
			__network_add_dev_to_bridge $_dev2 $_tap_to_add
		done

		if [ -n "$_bridge_phy" ]; then
			echo "Adding $_bridge_phy to $_dev2"
			__network_add_dev_to_bridge "$_dev2" $_bridge_phy
			__multi_chyves_zfs_property "set" "${_dev2}_phy_attach" "primary" ".config" "-" "$_bridge_phy"
		fi

		echo "Deleting chyves property '${_device}_phy_attach'"
		zfs inherit chyves:${_device}_phy_attach $_PRIMARY_POOL/chyves/.config

		echo "Deleting chyves property '${_device}_tap_members'"
		zfs inherit chyves:${_device}_tap_members $_PRIMARY_POOL/chyves/.config

		__get_bridge_members_on_system $_device
		if [ -z "$_BRIDGE_members_on_system" ]; then
			echo "Destroying $_device as no members on device."
			ifconfig $_device destroy
		fi

	# Unknown action verb used
	else
		__help
		__fault_detected_exit "Unknown action verb used for 'chyves network', see above for correct syntax."
	fi
}

# Adds network device to bridge
__network_add_dev_to_bridge() {
	local _bridge="$1"
	local _dev="$2"
	__verify_valid_system_iface "$_bridge" -c
	__get_bridge_members_on_system $_bridge

	local _bridge_conf=$_BRIDGE_members_on_system

	if [ -z "$( echo "$_bridge_conf" | grep -w "$_dev" )" ]; then
		echo -n "Adding '$_dev' as a member of '$_bridge'..."
		ifconfig "$_bridge" addm "$_dev"
		if [ "$?" != 0 ]; then
			__fault_detected_exit "'$_dev' can not be added to '$_bridge' membership."
		else
			echo " done."
		fi
		ifconfig "$_bridge" up
		ifconfig "$_dev" up
	elif [ -n "$( echo "$_bridge_conf" | grep -w "$_dev" )" ]; then
		echo "'$_dev' already a member of '$_bridge'"
	fi
}

# Adds outside interface to bridge with error handling
__network_add_phy_to_bridge() {
	local _bridge="$1"
	__get_bridge_phy_iface_chyves $_bridge
	local _outside_iface=$_BRIDGE_phy_iface_chyves
	__verify_valid_system_iface $_outside_iface

	# Join the outside interface to the bridge if not a private bridge
	__get_bridge_members_on_system $_bridge
	if [ "$_outside_iface" != "private" ]; then

		# Make a first attempt to get the outside interface connected to bridge
		if [ -z "$( echo "$_BRIDGE_members_on_system" | grep -w "$_outside_iface" )" ]; then
			__network_add_dev_to_bridge $_bridge $_outside_iface

			# Poll system again
			__get_bridge_members_on_system $_bridge

			# Make second attempt
			if [ -z "$( echo "$_BRIDGE_members_on_system" | grep -w "$_outside_iface" )" ]; then
				echo "Could not join $_outside_iface to $_bridge there is no outside network connectivity."
			fi

		# Already member of bridge
		else
			echo "$_outside_iface already member of $_bridge"
		fi
	else
		echo "$_bridge is set as a private bridge. No outside interfaces connected."
	fi
}

# Removes network device from bridge
__network_remove_dev_from_bridge() {
	local _bridge="$1"
	local _dev="$2"
	__verify_valid_system_iface $_bridge -n
	__get_bridge_members_on_system $_bridge
	local _bridge_conf=$( ifconfig "$_bridge" )

	if [ -n "$( echo "$_BRIDGE_members_on_system" | grep -w "$_dev" )" ]; then
		echo -n "Removing '$_dev' as a member of '$_bridge'..."
		ifconfig "$_bridge" deletem "$_dev"
		if [ "$?" != 0 ]; then
			__fault_detected_exit "Failed to remove '$_dev' from '$_bridge' membership."
		fi
		echo " done."
	else
		echo "'$_dev' was not a member of '$_bridge'."
	fi
}

# Verifies tap is not in use on system
__verify_tap_not_in_use() {
	local _tap_in_question="$1"

	__get_pid_locking_tap
	if [ -n "$_PID_locking_tap" ]; then
		__get_guest_name_by_pid $_PID_locking_tap
		__fault_detected_exit "Tap already in use by $_GUEST_name_by_pid"
	fi

	__get_parent_bridge_for_tap_chyves $_tap_in_question -n
	if [ -n "$_PARENT_bridge_for_tap_chyves" ]; then
		__fault_detected_exit "Tap already in use by $_PARENT_bridge_for_tap_chyves"
	fi
}

# Check if VALE might be possible on system
__verify_vale_system_compat() {
	[ "$_OS_VERSION_DATE" -lt "1003000" ] && __fault_detected_exit "VALE requires at least version FreeBSD 10.3 RELEASE and a patched bhyve binary."
	[ ! -e /dev/netmap ] && __fault_detected_exit "VALE requires the 'device netmap' be built into the kernel. Missing /dev/netmap."
	__verify_binary_available vale-ctl
	_VALE_system_compat=1
	echo "Using VALE interface, can not verify if bhyve binary is patch. If interface has 'no carrier' then the bhyve binary has not been patch and no traffic can pass on interface."
	echo "Keep in mind VALE support in chyves is experimental and not widely tested. All feedback is appreciated."
}

# Verifies interface is in valid format for type.
__verify_valid_iface_format() {
	local _int="$1"

	# Figure out interface type and assign to a global variable: bridge|tap|<vlan-prefix>|<physical>
	if [ -n "$( echo "$_int" | grep -E "^bridge[0-9]{1,5}$" )" ]; then
		_IFACE_type="bridge"
		_IFACE_drv="$_IFACE_type"
	elif [ -n "$( echo "$_int" | grep -E "^tap[0-9]{1,5}$" )" ]; then
		_IFACE_type="tap"
		_IFACE_drv="$_IFACE_type"
	elif [ -n "$( echo "$_int" | grep -E "^${_VLAN_IFACE_BASE_NAME}{1,5}$" )" ]; then
		_IFACE_type="vlan"
		_IFACE_drv="$_VLAN_IFACE_BASE_NAME"
	elif [ -n "$( echo "$_int" | grep -E "^vale[0-9a-zA-Z]{1,9}(:[a-zA-Z]{1}|:[0-9]{1,4}?)?$" )" ]; then
		_IFACE_type="vale"
		return
	elif [ -n "$( echo "$_int" | grep -E "$_FREEBSD_NET_DRIVERS_GREP_STRING" )" ]; then
		_IFACE_type="physical"
		_IFACE_drv="$( echo "$_int" | grep -o -E '[a-z]+' )"
	elif [ -n "$( echo "$_int" | grep "private" )" ]; then
		_IFACE_type="private"
		return
	else
		__fault_detected_exit "Invalid interface given: '$_int'."
	fi

	# Checks that only the prefix contains letters
	[ "$( echo "$_int" | grep -o -E '[a-z]+' | wc -l )" -gt 1 ] && __fault_detected_exit "Invalid interface: '$_int'. Only numbers can be used after the interface type."

	# Gets the interface number
	local _int_num="$( echo "$_int" | sed s/$_IFACE_drv//g )"

	# Checks for leading zeros. Only the first device and any vlan interface can have leading zeros.
	[ -n "$( echo "$_int_num" | grep -E '^0{1,}' | grep -v -E '^0$' )" ] && [ "$_IFACE_drv" != "$_VLAN_IFACE_BASE_NAME" ] && __fault_detected_exit "Invalid interface number used: $_int_num. Leading zeros not permitted except for VLANs and the first device (Eg: 'bridge0')."

	# Checks that interface number is less than 32768.
	[ "$_int_num" -gt 32768 ] && __fault_detected_exit "Invalid interface number used: '$_int_num'. Must be under 32769."
}

# Verifies interface exists on system
__verify_valid_system_iface() {
	local _int="$1"
	local _flags="$2"   # Optional
	__verify_valid_iface_format "$_int"
	# $null   Verifies interface is valid, exits if not.
	# -c      [create] Creates interface if it does not exist
	# -n      [no-exit] Does not exit.

	# Do not try to verify "private" or vale interfaces as valid.
	[ "$_int" = "private" ] || [ "$_IFACE_type" = "vale" ] && return

	ifconfig "$_int" > /dev/null 2>&1

	if [ "$?" = 1 ]; then

		if [ -z "$_flags" ]; then
			__fault_detected_exit "Interface does not exist on system: $_int"
		elif [ "$_flags" = "-c" ]; then
			echo -n "$_int does not exist on system... "
			echo -n "creating interface... "
			ifconfig "$_int" create descr "chyves-$_IFACE_type"
			echo "done."
		elif [ "$_flags" = "-n" ]; then
			echo "$_int does not exist on system."
		fi
	fi
}

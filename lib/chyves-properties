#!/bin/sh

# Copyright (c) 2015, pr1ntf (Trent Thompson) All rights reserved.
# Copyright (c) 2016, Justin D Holcomb All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Backend interface to set chyves properties with ZFS
__multi_chyves_zfs_property() {
	local _action="$1"      # get|set
	local _property="$2"    # <property name>
	local _pool="$3"        # primary|<pool name>
	local _resource="$4"    # .config|guests
	local _guest="$5"       # -|<guest name>
	local _value="$6"       # <property value>

	# Null out value when "-" used. Used for setting .config
	[ "${_guest}" = "-" ] && local _guest=""

	# If the guest variable is populated, prepend a "/" - This is for .config compatibility
	[ -n "${_guest}" ] && local _guest="/$_guest"

	# Set _pool to the primary pool name when "primary" is used in the _pool name variable.
	[ "${_pool}" = "primary" ] && local _pool=$_PRIMARY_POOL

	# Which action? get / set
	if [ "${_action}" = "get" ]; then

		# If CPU feature "UG" is missing limit to one CPU
		if [ "$_property" = "cpu" ] && [ "${_CPU_MISSING_UG}" ]; then
			echo "1"
		else
			zfs get -H -o value chyves:$_property $_pool/chyves/${_resource}${_guest}
		fi

	elif [ "${_action}" = "set" ]; then

		# If new property restrition is on, see if a new property name is being supplied.
		if [ "$_RESTRICT_NEW_PROPERTY_NAMES" = "on" ] && [ "$_NUMBER_OF_ALL_GUESTS" -gt "0" ]; then

			# Do not ever allow for setting new .defaults properties, to prevent confusion (except for setup)
			if [ "$_guest" = ".defaults" ] && [ "$_RESTRICT_NEW_PROPERTY_NAMES" != "primary-pool-initial-setup" ]; then
				local _valid_properties=$( __get_property_list -d )
				local _string_to_grep=$( __convert_list_to_grep_string "$_valid_properties" )
				if [ -z "$( echo "$_property" | grep -w -E "$_string_to_grep" )" ]; then
					__fault_detected_exit "${_property} is not a defined property ($_string_to_grep) pool. \nCreating new properties for .defaults is not possible."
				fi

			# Do not ever allow for setting new .config properties except bridge{n}_phy_attach and bridge{n}_tap_members, this is to prevent confusion.
			# $2 in __convert_list_to_grep_string under _string_to_grep is what is needed to allow setting bridge{n}_phy_attach and bridge{n}_tap_members as needed.
			# Use "set" directly is not recommended as it is not fully restrictive and will allow invalid bridge numbers be used which will later fail.
			elif [ "$_resource" = ".config" ] && [ "$_RESTRICT_NEW_PROPERTY_NAMES" != "primary-pool-initial-setup" ]; then
				local _valid_properties=$( __get_property_list -c )
				local _string_to_grep=$( __convert_list_to_grep_string "$_valid_properties" "bridge([0-9]{1,5})_phy_attach|bridge([0-9]{1,5})_tap_members" )
				if [ -z "$( echo "$_property" | grep -w -E "$_string_to_grep" )" ]; then
					__fault_detected_exit "${_property} is not a defined property ($_string_to_grep) pool. \nCreating new properties for .config is not possible."
				fi

			else
				local _valid_properties=$( __get_property_list -a )
				local _string_to_grep=$( __convert_list_to_grep_string "$_valid_properties" )
				if [ -z "$( echo "$_property" | grep -w -E "$_string_to_grep" )" ]; then
					__fault_detected_exit "${_property} is not a defined property ($_string_to_grep). \nCreation of new properties turned off with 'restrict_new_property_names' in .config"
				fi
			fi
		fi

		# Correct byte nomenclature for RAM and size for .default
		if [ "$_property" = "ram" ] || [ "$_property" = "size" ]; then
			__get_corrected_byte_nomenclature "$_value"
			local _value="$_CORRECTED_byte_nomenclature"
		fi

		# Do not exceed bhyve CPU capability
		[ "$_property" = "cpu" ] && [ "$_value" -gt "16" ] && local _value="16" && echo "bhyve has a 16 CPU core limit. Setting cpu=16"

		# Made it this far, set the value for the property.
		echo "Setting \"${_property}\" to value: \"${_value}\" for ${_resource}${_guest}"
		zfs set chyves:${_property}="${_value}" $_pool/chyves/${_resource}${_guest}
	fi
}

# Load guest parameters to global variables
__load_guest_parameters() {
	local _guest="$1"
	__get_pool_for_guest "$_guest"
	_GP_parameters_loaded=1

	# GP = Guest Parameter
	# Parameters held in ZFS user properties:
	_GP_bargs="$( __multi_chyves_zfs_property       "get" "bargs"       "$_GUEST_pool" "guests" "$_guest" )"
	_GP_con="$(__multi_chyves_zfs_property          "get" "con"         "$_GUEST_pool" "guests" "$_guest" )"
	_GP_cpu="$( __multi_chyves_zfs_property         "get" "cpu"         "$_GUEST_pool" "guests" "$_guest" )"
	_GP_fw="$( __multi_chyves_zfs_property          "get" "fw"          "$_GUEST_pool" "guests" "$_guest" )"
	_GP_loader="$( __multi_chyves_zfs_property      "get" "loader"      "$_GUEST_pool" "guests" "$_guest" )"
	_GP_os="$( __multi_chyves_zfs_property          "get" "os"          "$_GUEST_pool" "guests" "$_guest" )"
	_GP_ram="$( __multi_chyves_zfs_property         "get" "ram"         "$_GUEST_pool" "guests" "$_guest" )"
	_GP_rcboot="$( __multi_chyves_zfs_property      "get" "rcboot"      "$_GUEST_pool" "guests" "$_guest" )"
	_GP_net_ifaces="$( __multi_chyves_zfs_property  "get" "net_ifaces"  "$_GUEST_pool" "guests" "$_guest" )"
	_GP_uuid="$( __multi_chyves_zfs_property        "get" "uuid"        "$_GUEST_pool" "guests" "$_guest" )"

	# UEFI GOP Support
	_GP_uefi_console_output="$( __multi_chyves_zfs_property "get" "uefi_console_output"                  "$_GUEST_pool" "guests" "$_guest" )"
	_GP_uefi_mouse_type="$( __multi_chyves_zfs_property     "get" "uefi_mouse_type"                      "$_GUEST_pool" "guests" "$_guest" )"
	_GP_uefi_vnc_ip="$( __multi_chyves_zfs_property         "get" "uefi_vnc_ip"                          "$_GUEST_pool" "guests" "$_guest" )"
	_GP_uefi_vnc_port="$( __multi_chyves_zfs_property       "get" "uefi_vnc_port"                        "$_GUEST_pool" "guests" "$_guest" )"
	_GP_uefi_vnc_res="$( __multi_chyves_zfs_property        "get" "uefi_vnc_res"                         "$_GUEST_pool" "guests" "$_guest" )"
	_GP_uefi_vnc_pause="$( __multi_chyves_zfs_property      "get" "uefi_pause_until_vnc_client_connect"  "$_GUEST_pool" "guests" "$_guest" )"

	# Other parameters
	_GP_path="$( __get_path_for_guest_dataset "$_guest" "$_GUEST_pool" )"
	_GP_wire_memory="$( [ -n "$( echo "$_GP_bargs" | grep '\-S' )" ] && echo "-S" )"
}

# Loads .defaults parameters to global variables
__load_guest_default_parameters() {
	_GDP_parameters_loaded=1

	# GDP = Guest Default Parameter
	# Parameters held in ZFS user properties:
	_GDP_bargs="$( __multi_chyves_zfs_property      "get" "bargs"      "primary" "guests" ".defaults" )"
	_GDP_bridge="$( __multi_chyves_zfs_property     "get" "bridge"     "primary" "guests" ".defaults" )"
	_GDP_cpu="$( __multi_chyves_zfs_property        "get" "cpu"        "primary" "guests" ".defaults" )"
	_GDP_fw="$( __multi_chyves_zfs_property         "get" "fw"         "primary" "guests" ".defaults" )"
	_GDP_guest_role="$( __multi_chyves_zfs_property "get" "guest_role" "primary" "guests" ".defaults" )"
	_GDP_loader="$( __multi_chyves_zfs_property     "get" "loader"     "primary" "guests" ".defaults" )"
	_GDP_os="$( __multi_chyves_zfs_property         "get" "os"         "primary" "guests" ".defaults" )"
	_GDP_persist="$( __multi_chyves_zfs_property    "get" "persist"    "primary" "guests" ".defaults" )"
	_GDP_ram="$( __multi_chyves_zfs_property        "get" "ram"        "primary" "guests" ".defaults" )"
	_GDP_rcboot="$( __multi_chyves_zfs_property     "get" "rcboot"     "primary" "guests" ".defaults" )"
	_GDP_size="$( __multi_chyves_zfs_property       "get" "size"       "primary" "guests" ".defaults" )"

	# UEFI GOP Support
	_GDP_uefi_console_output="$( __multi_chyves_zfs_property "get" "uefi_console_output"                  "primary" "guests" ".defaults" )"
	_GDP_uefi_mouse_type="$( __multi_chyves_zfs_property     "get" "uefi_mouse_type"                      "primary" "guests" ".defaults" )"
	_GDP_uefi_vnc_ip="$( __multi_chyves_zfs_property         "get" "uefi_vnc_ip"                          "primary" "guests" ".defaults" )"
	_GDP_uefi_vnc_res="$( __multi_chyves_zfs_property        "get" "uefi_vnc_res"                         "primary" "guests" ".defaults" )"
	_GDP_uefi_vnc_pause="$( __multi_chyves_zfs_property      "get" "uefi_pause_until_vnc_client_connect"  "primary" "guests" ".defaults" )"

	# Get _disk specific properties
	_GDP_disk_volmode="$( __multi_chyves_zfs_property         "get" "disk_volmode"        "primary" "guests" ".defaults" )"
	_GDP_disk_volblocksize="$( __multi_chyves_zfs_property    "get" "disk_volblocksize"   "primary" "guests" ".defaults" )"
	_GDP_disk_dedup="$( __multi_chyves_zfs_property           "get" "disk_dedup"          "primary" "guests" ".defaults" )"
	_GDP_disk_compression="$( __multi_chyves_zfs_property     "get" "disk_compression"    "primary" "guests" ".defaults" )"
	_GDP_disk_primarycache="$( __multi_chyves_zfs_property    "get" "disk_primarycache"   "primary" "guests" ".defaults" )"
	_GDP_disk_secondarycache="$( __multi_chyves_zfs_property  "get" "disk_secondarycache" "primary" "guests" ".defaults" )"
}

# Corrects user input when setting RAM properties and size for .defaults
__get_corrected_byte_nomenclature() {
	local _var="$1"

	[ -n "$( echo "$_var" | grep -v -E '^[0-9]{1,}[kmgtKMGT]?$' )" ] && __fault_detected_exit "Unrecognized size: '$_var', must be any integer and optionally a suffix K, M, G, or T. Megabytes are assumed if not specified."

	# Change to upper case
	local _var=$( echo "$_var" | tr '[:lower:]' '[:upper:]' )

	# Break _var into two parts number and size suffix
	local _num=$( echo "$_var" | grep -o -E "[0-9]{1,}" )
	local _suffix=$( echo "$_var" | grep -o "[kmgtKMGT]" )

	# If no suffix, then use the bhyve default of Megabytes
	[ -z "$_suffix" ] && local _suffix="M"

	# If devisable by 1024, then increase the file size denomination
	while [ "$( expr $_num % 1024 )" -eq 0 ] && [ "$_suffix" != "T" ]
	do
		local _num=$( expr $_num / 1024 )
		[ "$_suffix" = "G" ] && local _suffix="T"
		[ "$_suffix" = "M" ] && local _suffix="G"
		[ "$_suffix" = "K" ] && local _suffix="M"
	done

	_CORRECTED_byte_nomenclature="$_num$_suffix"
}

# Frontend interface to set chyves properties
__set() {
	local _name="$3"          # This is script indexed.

	# Legacy command syntax support
	if [ -z "$( echo "$2" | grep '=' )" ] && [ -n "$( echo "$3" | grep '=' )" ]; then
		echo "[WARNING] The correct syntax is 'chyves set ${3} ${2}...', correcting syntax for temporary backwards compatibility. This will be deprecated at some point."
	elif [ -n "$( echo "$2" | grep '=' )" ] && [ -n "$( echo "$3" | grep '=' )" ]; then
		__help
		__fault_detected_exit "Incorrect syntax used. See above for correct syntax"
	else
		# Needed to seed first iteration.
		local guests="$_name"
		# Kind of amusing how the new syntax is a little more complicated
	fi

	shift 1   # Keep from setting "set" as a property or using as a guest name.
	for arg in "$@"; do

		# Guest name detector
		if [ -n "$( echo "$arg" | grep -v '=' )" ]; then
			local guests="$arg"

			# Skip remain loop as it is property specific.
			continue
		fi

		# Multi-guest support.
		# Eg.: chyves set cpu=8 guest1,guest2,guest3 ram=512M
		for name in `echo "$guests" | tr ',' ' '`
		do

			if [ "$name" != "$_lastguest" ]; then
				if [ "$name" = ".config" ]; then
					echo "Switching to setting properties for .config on: $_PRIMARY_POOL"
				elif [ "$name" = ".defaults" ]; then
					echo "Switching to setting properties for .defaults on: $_PRIMARY_POOL"
					_GUEST_pool="$_PRIMARY_POOL"
				else
					echo "Switching to setting properties for guest: $name"
					__get_pool_for_guest "$name"
				fi
			fi

			# Parse property name and desired value from $arg (aka positional parameter)
			local prop="$(echo $arg | cut -d '=' -f1)"
			local val="$(echo $arg | cut -d '=' -f2)"

			# Use function to set ZFS property
			if [ "$name" = ".config" ]; then
				__multi_chyves_zfs_property "set" "$prop" "$_PRIMARY_POOL" ".config" "-" "$val"
			else
				__multi_chyves_zfs_property "set" "$prop" "$_GUEST_pool" "guests" "$name" "$val"
			fi

			# Used to save some cycles
			local _lastguest=$name
		done
	done
}

# Frontend interface to get chyves properties
__get() {
	local prop="$1"
	local guests="$2"

	# Multi-guest support.
	# Eg.: chyves get cpu guest1,guest2,guest3
	for name in `echo "$guests" | tr ',' ' '`
	do
		__get_pool_for_guest "$name"

		if [ "$prop" = "all" ]; then
			echo "Getting all $name's chyves properties..."
			zfs get -o property,value all ${_GUEST_pool}/chyves/guests/${name} | grep chyves: | sort | sed -e 's/chyves://g'
		else
			echo "Getting $name's property \"$prop\"..."
			__multi_chyves_zfs_property "get" "$prop" "$_GUEST_pool" "guests" "$name"
		fi
	done
}

.\" Text automatically generated by txt2man
.TH chyves 8 "15 May 2016" "" "FreeBSD System Manager's Manual"
.SH NAME
\fBchyves(8) \fP- \fBbhyve\fP(8) front end manager version 0.0.0
\fB
.SH SYNOPSIS
.nf
.fam C
\fBchyves\fP \fIversion\fP
\fBchyves\fP \fIsetup\fP pool=<pool> kmod=<0|1> net=<interface-name>
\fBchyves\fP \fIlist\fP [null|iso|firmwares|snapshots|.config|.defaults|pools|processes|
           <property-name>]
\fBchyves\fP \fIlist\fP \fItap\fP \fIactive\fP
\fBchyves\fP \fIlist\fP .config [<pool>|primary]
\fBchyves\fP \fIlist\fP \fIprocesses\fP [<name>]
\fBchyves\fP \fIinfo\fP [\fB-rvstdnakgil\fP|\fB-h\fP]
\fBchyves\fP \fIiso\fP {\fIlist\fP|import|rename|delete}
\fBchyves\fP \fIiso\fP \fIlist\fP
\fBchyves\fP \fIiso\fP \fIimport\fP {http-URL|ftp-URL|local-path}
\fBchyves\fP \fIiso\fP \fIrename\fP <oldname> <newname>
\fBchyves\fP \fIiso\fP \fIdelete\fP <name>
\fBchyves\fP \fIfirmware\fP {\fIlist\fP|\fIimport\fP|\fIrename\fP|\fIdelete\fP}
\fBchyves\fP \fIfirmware\fP \fIlist\fP
\fBchyves\fP \fIfirmware\fP \fIimport\fP {http-URL|ftp-URL|local-path}
\fBchyves\fP \fIfirmware\fP \fIrename\fP <oldname> <newname>
\fBchyves\fP \fIfirmware\fP \fIdelete\fP <name>
\fBchyves\fP \fIcreate\fP <name> [\fIsize\fP] [\fIpool\fP]
\fBchyves\fP \fIinstall\fP <name> <\fIiso\fP-file>
\fBchyves\fP \fIstart\fP <name> [\fB-s\fP | \fB-a\fP]
\fBchyves\fP \fIstop\fP <name>
\fBchyves\fP \fIforcekill\fP <name>
\fBchyves\fP \fIscram\fP
\fBchyves\fP \fIdestroy\fP <name>
\fBchyves\fP \fIrename\fP <name> <newname>
\fBchyves\fP \fIdelete\fP <name>
\fBchyves\fP \fIset\fP <property1>=<value> {<name>|.defaults} [prop2=value]\.\.\.
\fBchyves\fP \fIget\fP {<property>|all} <name>
\fBchyves\fP \fIrmpci\fP [\fB-f\fP] [\fIname\fP] [\fIpcidev:N\fP]
\fBchyves\fP \fIadd\fP [\fIname\fP] [\fIsize\fP] [[\fIpool\fP]]
\fBchyves\fP \fIremove\fP [\fB-f\fP] [\fIname\fP] [\fIdiskN\fP]
\fBchyves\fP \fIresize\fP [\fIname\fP] [\fIdiskN\fP] [\fIsize\fP]
\fBchyves\fP \fIdisks\fP [\fIname\fP]
\fBchyves\fP \fIsnap\fP <\fIname\fP>[@<snapshotname>]
\fBchyves\fP \fIroll\fP <\fIname\fP>[@<snapshotname>]
\fBchyves\fP \fIclone\fP {\fB-c\fP|\fB-r\fP} <\fIname\fP> <clonename>
\fBchyves\fP \fIexport\fP <\fIname\fP>
\fBchyves\fP \fIconsole\fP <\fIname\fP> [\fB-t\fP]
\fBchyves\fP \fIconreset\fP
\fBchyves\fP \fIhelp\fP

\fBSYNTAX\fP NOMENCLATURE:
\fBThe\fP \fIfollowing\fP \fIsyntax\fP \fInomenclature\fP \fIis\fP \fIused\fP \fIto\fP \fIsignify\fP \fIwhen\fP \fIparameter\fP \fIis\fP \fIrequire\fP
\fBor\fP \fIoptional\fP \fIand\fP \fIalso\fP \fIto\fP indicate.
 \fBlist\fP             - \fIText\fP \fIwithout\fP \fIbrackets\fP \fIare\fP required.
 {\fIrequire\fP|\fIlist\fP}   - \fIA\fP \fIrequire\fP \fIlist\fP \fIwhere\fP \fIone\fP \fIoption\fP \fImust\fP \fIbe\fP \fIused\fP. '|' \fIseparate\fP
                  options.
 [\fIoptional\fP]       - \fIAn\fP \fIoptional\fP \fIfield\fP
 [\fIoptional\fP|\fIlist\fP]  - \fIAn\fP \fIoptional\fP \fIlist\fP, \fIvalid\fP \fIif\fP \fInot\fP \fIused\fP. '|' \fIseparate\fP \fIoptions\fP
 <user-\fIinput\fP>     - \fIUser\fP \fIsupplied\fP \fIinput\fP \fIfield\fP. \fIRequired\fP \fIwhen\fP \fInot\fP \fIcontain\fP \fIin\fP [ ].
 [\fB-abcdefg\fP]       - \fIAn\fP \fIoptional\fP \fIfield\fP \fIbut\fP \fImust\fP \fIstart\fP \fIwith\fP \fI.\fP "-" \fIand\fP \fIfollowed\fP \fIby\fP
                  \fIany\fP combination, \fIin\fP \fIany\fP order. Eg. "\fB-gca\fP" \fIis\fP \fIvalid\fP.
 \fIname\fP             - \fIchyves\fP \fIguest\fP \fIname\fP

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBThe\fP \fBchyves\fP(\fI.\fP) Bourne shell script relies on the FreeBSD hypervisor \fBbhyve\fP(\fI.\fP),
\fBzfs\fP(\fI.\fP), \fBnmdm\fP(\fI.\fP), \fIand\fP \fBcu\fP(\fI.\fP) \fIto\fP \fIstart\fP \fIand\fP manage type \fI.\fP virtualized guests.
Optionally grub2-bhyve \fIand\fP \fBtmux\fP(\fI.\fP) can \fIbe\fP \fIused\fP \fIto\fP expand the capabilities of
\fIchyves\fP. \fIchyves\fP uses ZFS user properties, filesystems, \fIand\fP volumes \fIto\fP store
guests \fIand\fP resources \fIin\fP an organized hierarchy. \fIchyves\fP \fIalso\fP uses the virtio
drivers built into the GENERIC kernel for network virtualization. \fBThe\fP virtio
drivers \fIare\fP \fIused\fP \fIto\fP paravirtualize \fI.\fP/\fI.\fP for disk \fIand\fP network access.
.PP
For networking, \fI.\fP \fIguest\fP \fIis\fP presented \fI.\fP PCI Ethernet device, the host
communicates \fIwith\fP this device through \fI.\fP \fItap\fP interface which \fIin\fP-turn \fIis\fP connected
\fIto\fP \fI.\fP bridge interface.
.PP
For storage, guests \fIare\fP provided block storage \fBdevice\fP(\fI.\fP) via ZFS volumes from
the host. Datasets \fIare\fP \fIused\fP \fIto\fP organize these block devices \fIand\fP other important
data \fIin\fP \fI.\fP hierarchical structure. ZFS user properties \fIare\fP referenced \fIwhen\fP
starting \fI.\fP \fIguest\fP \fIwith\fP bhyve \fIand\fP \fIoptional\fP grub-bhyve. \fBThe\fP properties \fIcontain\fP
values such as the CPU count, RAM allotment, \fIand\fP other qualities about the
\fIguest\fP.
.PP
Single \fIand\fP multi-\fIpool\fP hosts \fIare\fP supported. Single \fIpool\fP hosts \fIand\fP pools \fIset\fP \fIto\fP
the 'primary' role \fIare\fP mounted \fIto\fP '/\fIchyves\fP' \fIand\fP additional ZFS pools \fIget\fP mounted
\fIto\fP '/\fIchyves\fP/<poolname>' \fIand\fP \fIare\fP \fIset\fP \fIto\fP \fI.\fP 'secondary' \fIpool\fP role. In the ZFS
dataset '$\fIpool\fP/\fIchyves\fP/.config', the \fIchyves\fP property 'dataset_role' \fIis\fP \fIused\fP \fIto\fP
store the role of that \fIpool\fP containing the \fIchyves\fP datasets. Valid values \fIare\fP
primary, secondary, \fIand\fP offline. Only \fIone\fP 'primary' dataset can \fIbe\fP configured
per system, only the primary dataset contains the ISO \fIand\fP \fIfirmware\fP resources,
\fIand\fP only the primary \fIpool\fP contains the guests/.default dataset which \fIis\fP
referenced \fIwhen\fP setting properties for new guests. \fBThe\fP primary \fIpool\fP \fIis\fP \fIalso\fP
\fIwhere\fP new guests \fIare\fP created \fIwhen\fP the [\fIpool\fP] argument \fIis\fP \fInot\fP specified \fIwith\fP
\fIchyves\fP \fIcreate\fP. All other \fIactive\fP pools \fIare\fP \fIset\fP \fIto\fP the "secondary" role. Pools \fIset\fP
\fIto\fP the "offline" role \fIare\fP left untouched \fIand\fP \fIis\fP \fI.\fP good role \fIto\fP put \fI.\fP local
replicated backup. \fBThe\fP primary \fIpool\fP \fIis\fP critical \fIto\fP the operation of \fIchyves\fP.
Without \fI.\fP primary \fIpool\fP \fIset\fP only the "\fIsetup\fP" sub-command \fIis\fP allowed \fIto\fP run. \fBThe\fP
first \fIpool\fP \fIto\fP \fIbe\fP \fIsetup\fP on the system \fIis\fP the primary \fIpool\fP.
.PP
Multi-\fIguest\fP support \fIis\fP the ability \fIto\fP specify multiple \fIguest\fP names that \fIare\fP
comma \fIseparate\fP for \fI.\fP sub-command. Not all sub-commands have this functionality
\fIbut\fP the ones that do, allow for rapid execution of the same command over many
guests, this can \fIbe\fP incredibly helpful for \fI.\fP fleet of VMs. \fBThe\fP \fIfollowing\fP
sub-commands support multi-\fIguest\fP \fIand\fP \fIare\fP provided \fIwith\fP \fI.\fP complex example below:
\fIchyves\fP \fIclone\fP -\fI.\fP goldenVM devteam1,devteam2,devteam3 dev-\fIpool\fP
\fIchyves\fP \fIcreate\fP g1,g2,g3 8G ssd-\fIpool\fP
.SH PROPERTIES
One of the hallmarks of iocage, iohyve, \fIand\fP \fIchyves\fP \fIis\fP storing guests parameters
as ZFS user properties. For \fIchyves\fP there \fIare\fP three types of properties \fIto\fP \fIset\fP
\fIand\fP use: global configuration properties, per-\fIguest\fP properties, \fIand\fP default
properties for newly created guests.
.PP
Global Configuration Properties:
One of the qualities that \fIchyves\fP capitalizes on \fIis\fP multi-\fIpool\fP configurations.
Multiple \fIpool\fP configurations \fIare\fP quiet common \fIin\fP FreeNAS deployments,
separated storage types (eg: SSD, HD, NVMe), \fIand\fP OS plus storage
configurations. With multiple pools, it becomes necessary \fIto\fP have roles for
each \fIpool\fP. This \fIis\fP facilitated through the use of \fI.\fP dataset called '.config'
\fIwhere\fP global \fIand\fP \fIpool\fP specific properties \fIare\fP stored.
.RS
.PP
Single \fIpool\fP configurations \fIare\fP still supported \fIand\fP there \fIis\fP no loss \fIin\fP
functionality. As the first \fIpool\fP \fIis\fP always \fIset\fP as the primary \fIpool\fP no changes
\fIare\fP unique for single \fIpool\fP configurations.
.PP
Many of these global properties \fIare\fP \fInot\fP recommended \fIto\fP \fIbe\fP changed unless you
understand the scope of their impact \fBor\fP \fIare\fP managed through subcommands such
as '\fIchyves\fP network'
.PP
Usage: \fIchyves\fP \fIget\fP <property> .config
\fIchyves\fP \fIset\fP <property>=<value> .config
\fIchyves\fP \fIlist\fP .config [\fIpool\fP]
.PP
bridge{\fI.\fP}_phy_attach={<interface>|private}
This property contains \fI.\fP physical \fBor\fP vlan interface \fIname\fP for \fI.\fP bridge
\fIto\fP belong. When \fIset\fP \fIto\fP "private" the bridge \fIis\fP \fInot\fP joined \fIwith\fP \fI.\fP outside
network.
Example values: bridge0_attach=em0
bridge10_phy_attach=vlan52
bridge512_phy_attach=private
To \fIset\fP this property use the follow command \fIsyntax\fP:
\fIchyves\fP network bridge{\fI.\fP} attach {<interface>|private}
bridge{\fI.\fP}_tap_members={\fItap\fP{\fI.\fP}[,\fItap\fP{\fI.\fP},\fItap\fP{\fI.\fP}]}
This property \fIis\fP \fI.\fP comma separated \fIlist\fP of the \fItap\fP members for bridge{\fI.\fP},
\fIwhere\fP {\fI.\fP} \fIis\fP the interface number. Valid values for "\fI.\fP" \fIare\fP \fI.\fP \fIto\fP 32768.
Guests \fIare\fP automatically added \fIto\fP this property using the bridge{\fI.\fP} that \fIis\fP
\fIset\fP \fIin\fP .defaults under the "bridge" property.
Examples values: bridge0_tap_members=tap0
bridge70_tap_members=tap20,tap30
\fI.\fP \fItap\fP can \fIbe\fP moved \fIto\fP another bridge \fIby\fP first removing the \fItap\fP from the
original bridge \fIand\fP adding \fIto\fP the desired bridge. Use the \fIfollowing\fP command
\fIsyntax\fP \fIto\fP do this:
\fIchyves\fP network bridge{\fI.\fP} \fIremove\fP \fItap\fP{\fI.\fP}
\fIchyves\fP network bridge{\fI.\fP} \fIadd\fP \fItap\fP{\fI.\fP}
console_start_offset={integer}
This \fIis\fP \fI.\fP compatibility mechanism \fIused\fP \fIto\fP offset the first \fIchyves\fP null
\fIconsole\fP modem number so that \fI.\fP collision \fIis\fP less likely \fIwith\fP another
application \fBor\fP bhyve front end manager. \fBThe\fP initial default \fIis\fP \fIset\fP \fIto\fP "50".
dataset_role={primary|secondary|offline}
Vital \fIin\fP multi-\fIpool\fP configurations, each role type has different
characteristics as explained below:
primary - Pools \fIin\fP this role \fIare\fP utilized exclusively for the \fIfollowing\fP
purposes: Store ISO \fIand\fP Firmware resources. Reference point for
global .config properties. New \fIguest\fP \fIare\fP defaulted \fIto\fP \fIbe\fP created
on this \fIpool\fP unless otherwise specified as \fI.\fP \fIparameter\fP for
\(cq\fIchyves\fP \fIcreate\fP'. Only \fIone\fP ZFS \fIpool\fP can \fIbe\fP \fIin\fP the primary role per
system \fIand\fP \fIis\fP the only role for single zpool configurations.
secondary - Pools \fIin\fP this role \fIare\fP utilized for storing other \fIactive\fP guests
\fInot\fP stored on the primary ZFS \fIpool\fP.
offline - Pools \fIin\fP this role \fIare\fP \fInot\fP utilized, this role \fIis\fP intended for
backup. Guests on these pools can \fInot\fP \fIbe\fP started \fIand\fP \fIare\fP hidden
from most subcommands. To display only these guests use:
\(cq\fIchyves\fP \fIinfo\fP -\fI.\fP'
dev_mode={off|on|\fB-xvn\fP}
Setting \fIto\fP "on" for the primary \fIpool\fP activates the \fIfollowing\fP developer
features:
Displays the full bhyve command \fIused\fP \fIto\fP \fIstart\fP \fI.\fP \fIguest\fP.
Allows for functions \fIto\fP \fIbe\fP called direct from the command line using "\fIchyves\fP
dev". Using the \fB-xvn\fP flags instead of the word "on" will use Bourne'\fI.\fP "\fIset\fP"
command \fIto\fP turn on special \fIoption\fP flags during "\fIchyves\fP dev" execution. These
flags can \fIbe\fP \fIused\fP individually (-\fI.\fP|-\fI.\fP|-\fI.\fP) \fBor\fP combined (\fB-xv\fP). See \fBsh\fP(\fI.\fP).
pool_version={\fIpool\fP-\fIversion\fP}
This \fIis\fP \fInot\fP \fI.\fP user settable property. This property \fIindicate.\fP the
the current \fIversion\fP of the \fIchyves\fP \fIpool\fP. \fI.\fP check \fIis\fP ran before
execution \fIto\fP ensure the \fIversion\fP of the \fIpool\fP \fIis\fP compatible \fIwith\fP
the \fIversion\fP of \fIchyves\fP. This ensures all the necessary properties
\fIare\fP on the dataset. This mechanism \fIis\fP \fI.\fP matter of future proofing.
restrict_new_property_names=[off|on]
Setting \fIto\fP "on" allows for new properties \fIto\fP \fIbe\fP created \fIwith\fP '\fIchyves\fP \fIset\fP'.
\fBThe\fP default \fIis\fP \fIset\fP \fIto\fP "off" \fIto\fP prevent creating new properties due \fIto\fP typos.
tap_start_offset={integer}
This \fIis\fP \fI.\fP compatibility mechanism \fIused\fP \fIto\fP offset the first \fIchyves\fP \fItap\fP
interface so that \fI.\fP collision \fIis\fP less likely \fIwith\fP another application \fBor\fP
bhyve front end manager. \fBThe\fP initial default \fIis\fP \fIset\fP \fIto\fP "50", \fIvalid\fP values
\fIare\fP from \fI.\fP \fIto\fP 32767.
tap_up_by_default={off|on}
When \fIset\fP \fIto\fP "yes", the sysctl: net.link.tap.up_on_open \fIis\fP \fIset\fP \fIto\fP "\fI.\fP" \fIwhen\fP
running script. Default \fIis\fP "on" \fIbut\fP it \fIis\fP recommended \fIto\fP \fIset\fP \fIto\fP "off" \fIand\fP
update your /boot/loader.conf \fIto\fP \fIset\fP this sysctl.
vlan_iface_base_name=<vlan_base_name>
When using \fI.\fP non-standard vlan naming \fInomenclature\fP this needs \fIto\fP reflect the
change. \fBThe\fP default \fIis\fP "vlan" \fIwhen\fP using the standard "vlan{\fI.\fP}" naming
\fInomenclature\fP.
.RE
.PP
Guest Properties:
These \fIare\fP properties \fIused\fP \fIby\fP \fIchyves\fP \fIto\fP specify the parameters \fIto\fP pass \fIto\fP bhyve
\fIand\fP grub-bhyve \fIwhen\fP starting \fI.\fP \fIguest\fP.
.RS
.PP
Usage: \fIchyves\fP \fIget\fP <property> {<\fIname\fP>}
Usage: \fIchyves\fP \fIget\fP all {<\fIname\fP>}
Usage: \fIchyves\fP \fIlist\fP properties
Usage: \fIchyves\fP \fIlist\fP <property>
Usage: \fIchyves\fP \fIset\fP <property1>=<value> {<\fIname\fP>} <property2>=<value>
<property3>=<value>
Usage: \fIchyves\fP \fIset\fP <property1>=<value> {<\fIname\fP>} <property2>=<value>
<property3>=<value> {<name2>} <property1>=<value> <property2>=<value>
.PP
ram=[nS]
[\fI.\fP] \fIis\fP the number of bytes \fIand\fP [\fI.\fP] \fIis\fP the \fIsize\fP \fIin\fP \fI.\fP megabytes \fBor\fP \fI.\fP gigabytes.
Usage: ram=2G for \fI.\fP Gigabytes of RAM allocation.
\fIclone\fP
Used \fIto\fP indicate the \fIclone\fP relationship \fIwhen\fP the \fIguest\fP \fIis\fP \fIclone\fP using
\(cq\fIchyves\fP \fIclone\fP -\fI.\fP'. Not user settable property.
Valid values: -|parent|child
\fIclone\fP-assc
Used \fIto\fP indicate the associated \fIclone\fP guests. For children this would
indicate the parent'\fI.\fP \fIguest\fP \fIname\fP. For \fI.\fP parents this would \fIbe\fP all
all the child guests, comma separated \fIif\fP more than \fIone\fP. Not user settable
property.
cpu=[\fI.\fP]
Sets number [\fI.\fP] of cpu cores \fIto\fP use, up \fIto\fP 16.
con=nmdm[\fI.\fP]
Attaches null modem \fIconsole\fP. [\fI.\fP] \fImust\fP \fIbe\fP \fI.\fP unique number \fIand\fP
can \fInot\fP \fIbe\fP shared between started guests.
uuid= Sets UUID for bhyve instance. Normally \fIset\fP \fIby\fP /bin/uuidgen at creation.
\fItap\fP=\fItap\fP{\fI.\fP}[,\fItap\fP{\fI.\fP}]
\fItap\fP \fBdevice\fP(\fI.\fP) \fIused\fP for virtio-net
{\fI.\fP} \fIis\fP \fI.\fP \fItap\fP interface number \fIto\fP use.
Taps \fIare\fP process locked \fIand\fP can \fInot\fP \fIbe\fP shared \fIby\fP simultaneously \fIby\fP multiple
guests. Specify multiple \fItap\fP devices using \fI.\fP comma.
Examples: \fIchyves\fP \fIset\fP \fItap\fP=tap0 <\fIname\fP>
\fIchyves\fP \fIset\fP \fItap\fP=tap0,tap10,tap20,tap39 <\fIname\fP>
\fItap\fP{\fI.\fP}_mac={xx:xx:xx:yy:yy:yy}
{\fI.\fP} \fIis\fP the \fItap\fP interface \fIto\fP assign the specified MAC address \fIto\fP \fIbe\fP attached
\fIto\fP the network adapter inside the \fIguest\fP OS. \fBThe\fP MAC address \fIis\fP an ASCII
string \fIin\fP \fBethers\fP(\fI.\fP) format.
Example: "tap10_mac=58:9C:FC:00:00:00"
pcidev:{\fI.\fP}={spec}
Advanced way \fIto\fP \fIadd\fP devices \fIto\fP the \fIguest\fP. See \fBbhyve\fP(\fI.\fP) for complete details.
{\fI.\fP} \fIis\fP the pcislot bus number, \fIvalid\fP values \fIare\fP from \fI.\fP \fIto\fP 31.
{spec} defines \fI.\fP virtual device added \fIto\fP the \fIguest\fP \fIby\fP using \fI.\fP bhyve -\fI.\fP
argument \fIwithout\fP the pcislot \fBor\fP function argument. PCI slot numbers \fIare\fP
assigned automatically \fIby\fP \fIchyves\fP.
Examples: "pcidev:\fI.\fP=passthru,\fI.\fP/\fI.\fP/\fI.\fP"
"pcidev:\fI.\fP=ahci-hd,/some/place/disk.img"
os={operating-system}
Supported values \fIare\fP freebsd, openbsd59, openbsd58, openbsd57, netbsd,
debian, d8lvm, centos6, centos7, arch, gentoo \fIand\fP custom. Any other values
\fIare\fP handled \fIby\fP \fI.\fP catch-all. There \fIis\fP no special handling for "freebsd"
guests except \fIwhen\fP the CPU lacks the UG feature on Intel CPUs, then only
guests \fIwith\fP "freebsd" as the "os" property \fIare\fP allowed \fIto\fP \fIstart\fP due \fIto\fP the
CPU virtualization limitations.
rcboot={\fI.\fP|<positive-integer>}
Tells \fIchyves\fP \fIto\fP \fIstart\fP guests upon host boot \fI.\fP positive integer \fIis\fP assigned.
\fBThe\fP integer represents the boot priority \fIwhere\fP the highest numbered \fIguest\fP \fIis\fP
started first. \fBThe\fP iohyve_enable="YES" directive \fImust\fP \fIbe\fP configured \fIin\fP
/etc/rc.conf for this \fIto\fP work. Using "\fI.\fP" disables starting \fIguest\fP on host
boot.
loader={bhyveload|uefi|grub-bhyve}
Tells which loader \fIto\fP \fIused\fP \fIto\fP boot \fIguest\fP. bhyveload \fIis\fP for FreeBSD based
guests, uefi \fIis\fP \fIused\fP for UEFI based guests, \fIand\fP grub-bhyve \fIis\fP \fIused\fP for all
other guests.
description=["<INSERT BRIEF DESCRIPTION>"]
Used \fIto\fP describe \fIguest\fP. Use double quotes \fIwhen\fP description contains spaces.
notes=["<INSERT FURTHER NOTES>"]
Used \fIto\fP further describe guests. Use double quotes \fIwhen\fP description contains
spaces.
bargs
For advanced users \fIto\fP pass additional flags directly \fIto\fP bhyve. See \fBbhyve\fP(\fI.\fP)
for complete \fIlist\fP of flag \fIoptions\fP. Not \fIto\fP \fIbe\fP changed unless directed. For
complete \fIlist\fP of flags \fIused\fP \fIby\fP \fIchyves\fP \fIwhen\fP starting \fI.\fP specific \fIguest\fP, turn
on global configuration "dev_mode" \fIto\fP "on".
fw=<\fIfirmware\fP-resource-\fIname\fP>
Firmware file loaded \fIto\fP boot UEFI guests.
persist={\fI.\fP|\fI.\fP|\fI.\fP}
Used \fIto\fP indicate how \fIto\fP handle \fIwhen\fP the bhyve process ends.
[\fI.\fP] - Leave powered off \fIwhen\fP bhyve process closes
[\fI.\fP] - Power off \fIguest\fP \fIif\fP shutdown state \fIis\fP detected, attempt \fIto\fP
reboot otherwise. This \fIis\fP the default.
[\fI.\fP] - Always attempt \fIto\fP reboot.
.RE
.PP
Default Guest Properties:
These properties \fIare\fP referenced \fIwhen\fP creating new guests. \fBThe\fP \fIguest\fP section of
properties have the same purpose as described \fIin\fP "Guest Properties" section
above, unless otherwise noted. Below \fIare\fP the defaults values on \fI.\fP fresh
installation of \fIchyves\fP for reference.
.RS
.PP
bargs-A_-H_-\fI.\fP
bridge=bridge0
Used \fIto\fP \fIset\fP the default bridge interface \fIto\fP join \fItap\fP interfaces \fIto\fP.
cpu=\fI.\fP
bridges=bridge0
loader=bhyveload
os=default
persist=\fI.\fP
ram=256M
rcboot=\fI.\fP
\fIsize\fP=8G
Used during \fIsetup\fP \fIwhen\fP the \fIsize\fP \fIfield\fP \fIis\fP omitted. No longer \fI.\fP \fIguest\fP
property. \fBThe\fP ZFS property "usedbychildren" \fIis\fP \fIused\fP \fIto\fP show the \fIsize\fP \fIin\fP
\(cq\fIchyves\fP \fIinfo\fP'.
.PP
These default disk properties \fIare\fP direct ZFS values \fIused\fP \fIto\fP \fIcreate\fP \fIdisks\fP for
the \fIguest\fP. These properties \fIare\fP \fInot\fP recommended \fIto\fP \fIbe\fP changed, you \fIare\fP liable
\fIto\fP chainsaw your foot off \fIand\fP then massacre \fI.\fP nearby litter of kitten/puppies
\fIin\fP the process. You have been warned. \fBThe\fP value "inherit" will inherit the
value \fIset\fP \fIby\fP the (*grand)parents. See \fBzfs\fP(\fI.\fP) on settable values \fIbut\fP remember,
think of the kittens \fIand\fP puppies.
disk_volmode=dev
disk_volblocksize=512
disk_dedup=inherit
disk_compression=inherit
disk_primarycache=inherit
disk_secondarycache=inherit
.RE
.PP
SUB-COMMANDS
.TP
.B
\fIversion\fP
Prints the current running \fIversion\fP of \fIchyves\fP
.TP
.B
\fIsetup\fP
Installs ZFS datasets \fIand\fP properties on \fIpool\fP.
Usage: '\fIchyves\fP \fIsetup\fP [\fIpool\fP]'
Where [\fIpool\fP] \fIis\fP the \fIpool\fP you want \fIto\fP \fIinstall\fP \fIchyves\fP on.
.TP
.B
\fIlist\fP
Displays information about on general \fIguest\fP \fIinfo\fP \fIwith\fP the no
argument, "\fIiso\fP" will display ISOs resources, "snapshots" will
display snapshots for all guests, "\fItap\fP" will display all taps
including inactive taps, "\fItap\fP \fIactive\fP" will \fIlist\fP only \fIactive\fP taps,
\fIand\fP "con" will display configured consoles.
.RS
.TP
.B
$null
Lists properties about the guests \fIand\fP their \fIdisks\fP
using flags OS, Loader, \fIand\fP Description \fIin\fP \fI.\fP per \fIpool\fP
table.
.TP
.B
\fIiso\fP
Lists the ISO resources.
.TP
.B
firmwares
Lists the \fIfirmware\fP resources.
.TP
.B
snapshots
Lists all of the snapshots for all the guests. Does \fInot\fP
show snapshots of \fIdisks\fP (they \fIare\fP there, though).
.TP
.B
.config
Lists all the .config properties for all the \fIchyves\fP
pools.
.PP
.config [<\fIpool\fP-\fIname\fP>|primary] List all the config properties for \fI.\fP
\fIchyves\fP \fIpool\fP. \fBThe\fP word "primary" can \fIbe\fP \fIused\fP instead of
the primary \fIpool\fP'\fI.\fP \fIname\fP.
.TP
.B
pools
Lists all the pools \fIand\fP their roles. Helpful \fIwhen\fP no
guests have been created.
.TP
.B
\fIprocesses\fP
Lists all the \fIprocesses\fP *hyve \fIprocesses\fP.
.PP
\fIprocesses\fP [<\fIname\fP>] Lists all the \fIprocesses\fP *hyve \fIprocesses\fP for \fI.\fP
\fIguest\fP.
.TP
.B
bridges
Lists each the bridge \fIwith\fP the associated taps \fIand\fP
outside interface.
.PP
<\fIguest\fP-property> List the property given for all the guests. See
"Guest Properties" section above for \fI.\fP \fIlist\fP
.TP
.B
\fItap\fP \fIactive\fP
List all the \fItap\fP interfaces from /dev/\fItap\fP*
.RE
.TP
.B
\fIinfo\fP
Lists all the guests along \fIwith\fP their RAM, CPU, Size,
OS, Loader, \fIand\fP Description (\fIif\fP -\fI.\fP \fIis\fP passed). To control level of
output flags \fIare\fP \fIused\fP. Fields include CPU
count, RAM, Disk Size, Pool, OS, Loader, Tap, Console,
VMM status, Running status, rcboot flag, \fIand\fP the
description.
.TP
.B
\fIiso\fP
Handles ISO resources.
.PP
.nf
.fam C
            import      chyves iso import {URL|<local-path-to-iso>}
                        Imports an ISO resource into chyves. Either a local or
                        remote source can be give. Remote sources can be from
                        http or ftp. The user is prompted for a file hash when
                        a remote source is given. After the download completes
                        the file hash is compared with what is actually hashed.
                        MD5, SHA1, SHA256, and SHA512 are currently supported.
                        If the hashes mis-match then the user is prompted to
                        optionally delete the file. If no hash is supplied, the
                        user is heckled.

                        Supplied ISO resources can be compressed with current
                        support for files ending in .xz and .gz. Upon import
                        these files are extracted.

            rename      chyves iso rename {ISO-name} <desired-name>
                        Rename an ISO resource.

            delete      chyves iso delete {ISO-name}
                        Delete an ISO resource.

            list        chyve iso list
                        List available ISO resources.

.fam T
.fi
.TP
.B
\fIfirmware\fP
Handles \fIfirmware\fP resources.
.PP
.nf
.fam C
            import      chyves iso import {URL|<local-path-to-iso>}
                        Imports a firmware resource into chyves. Either a local
                        or remote source can be give. Remote sources can be from
                        http or ftp.

            rename      chyves firmware rename {firmware-name} <desired-name>
                        Rename an firmware resource.

            delete      chyves firmware delete {firmware-name}
                        Delete an firmware resource.

            list        chyve firmware list
                        List available firmware resources.

.fam T
.fi
.TP
.B
\fIcreate\fP
Creates new \fIguest\fP.
Usage: \fIchyves\fP \fIcreate\fP {\fIname\fP} [\fIsize\fP] [\fIpool\fP]
Where <\fIname\fP> \fIis\fP an uniquely identifying \fIname\fP \fIused\fP \fIto\fP reference the
\fIguest\fP, optionally [\fIsize\fP] \fIis\fP the \fIsize\fP of the block device \fIin\fP '8G'
format \fIwhere\fP the capital '\fI.\fP' signifies gigabytes, \fIand\fP optionally
[\fIpool\fP] \fIis\fP the \fIpool\fP \fIto\fP \fIcreate\fP the \fIguest\fP on \fIin\fP multi-\fIpool\fP
configurations. \fBThe\fP \fIpool\fP \fIis\fP defaulted \fIto\fP the primary \fIpool\fP \fIif\fP \fInot\fP
given. If [\fIsize\fP] \fIis\fP \fInot\fP \fIsupplied\fP, then '\fIsize\fP' \fIin\fP .default \fIis\fP \fIused\fP.
\fBThe\fP \fItap\fP interface \fIis\fP added \fIand\fP associated \fIwith\fP the bridge \fIset\fP \fIin\fP
.default as well. Support multi-\fIguest\fP specification.
.TP
.B
\fIinstall\fP
Loads \fIand\fP boots into ISO for \fIguest\fP installation.
Usage: '\fIchyves\fP \fIinstall\fP {\fIname\fP} {ISO}' \fIwhere\fP {\fIname\fP} \fIis\fP the \fIname\fP of the
\fIguest\fP, \fIand\fP {ISO} \fIis\fP the \fIname\fP of the ISO resource you would like \fIto\fP
boot from \fIin\fP the form of: 'install.iso'
.TP
.B
\fIstart\fP
Starts the \fIguest\fP.
Usage: '\fIchyves\fP \fIstart\fP [\fIname\fP] [-\fI.\fP | -\fI.\fP]'
\fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP of the \fIguest\fP operating system.
[-\fI.\fP] will cause the \fIguest\fP \fIto\fP \fIbe\fP started once
[-\fI.\fP] will cause the \fIguest\fP \fIto\fP always restart
.TP
.B
\fIstop\fP
Gracefully stops \fIguest\fP operating system.
Usage: '\fIchyves\fP \fIstop\fP [\fIname\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP
of the \fIguest\fP operating system.
.RE
.PP

.RS
.TP
.B
\fIforcekill\fP
Forces the \fIguest\fP \fIto\fP \fIstop\fP. Runs kill -\fI.\fP \fIand\fP destroys the \fIguest\fP
\fIin\fP VMM. USE WITH EXTREME CAUTION AND AS \fI.\fP LAST RESORT. Can \fIbe\fP
\fIused\fP \fIto\fP kill guests stuck at the GRUB \fIconsole\fP that you
do \fInot\fP have access \fIto\fP.
.TP
.B
\fIscram\fP
Gracefully \fIstop\fP all bhyve guests. Does \fInot\fP \fIdestroy\fP resources.
.TP
.B
\fIdestroy\fP
Destroys \fI.\fP \fIguest\fP'\fI.\fP VMM resources.
Usage: '\fIchyves\fP \fIdestroy\fP [\fIname\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP
of the \fIguest\fP operating system. Destroying \fI.\fP \fIguest\fP does
\fInot\fP [\fIdelete\fP] \fI.\fP \fIguest\fP from the host, it destroys the \fIguest\fP \fIin\fP VMM.
.TP
.B
\fIrename\fP
Renames the \fIguest\fP
Usage: '\fIchyves\fP \fIrename\fP [\fIname\fP] [newname]' \fIwhere\fP [\fIname\fP] \fIis\fP the
\fIname\fP of the \fIguest\fP \fIand\fP [newname] \fIis\fP the new \fIname\fP.
.TP
.B
\fIdelete\fP
Permanently deletes all parameters \fIand\fP \fIdisks\fP for \fI.\fP \fIguest\fP.
Usage: '\fIchyves\fP \fIdelete\fP [\fIname\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP
of the \fIguest\fP. If [-\fI.\fP] \fIis\fP \fIsupplied\fP before the
[\fIname\fP], there \fIis\fP no prompt \fIto\fP \fIdelete\fP.
.TP
.B
\fIset\fP
Sets ZFS properties for guests \fIone\fP at \fI.\fP time.
Usage: '\fIchyves\fP \fIset\fP [\fIname\fP] [prop1=value] [prop2=value]\.\.\.' \fIwhere\fP
[\fIname\fP] \fIis\fP the \fIname\fP of the \fIguest\fP operating system.
Using the [\fIname\fP] '.defaults' sets the default values for newly
created guests. See properties section above for more detail.
.TP
.B
\fIget\fP
Gets ZFS properties for guests
Usage: '\fIchyves\fP \fIget\fP [property] [\fIname\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP of
the \fIguest\fP. [property] \fIis\fP the property you want \fIto\fP view.
Usage: '\fIchyves\fP \fIget\fP all [\fIname\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIguest\fP \fIname\fP. All
properties \fIare\fP displayed.
Usage: '\fIchyves\fP \fIget\fP all' All properties \fIare\fP displayed.
See properties section above for more detail.
.TP
.B
\fIrmpci\fP
Removes \fI.\fP pcidev from the \fIguest\fP
Usage: '\fIchyves\fP \fIrmpci\fP [\fIname\fP] [pcidev:\fI.\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP
of the \fIguest\fP operating system. [pcidev:\fI.\fP] \fIis\fP the PCI
device you want removed. Ex: 'pcidev:\fI.\fP' If [-\fI.\fP] \fIis\fP \fIsupplied\fP
before the [\fIname\fP], there \fIis\fP no prompt \fIto\fP \fIremove\fP.
.TP
.B
\fIadd\fP
Adds \fI.\fP new disk \fIto\fP the \fIguest\fP.
Usage: '\fIchyves\fP \fIadd\fP [\fIname\fP] [\fIsize\fP] [[\fIpool\fP]]' \fIwhere\fP [\fIname\fP] \fIis\fP
the \fIname\fP of the \fIguest\fP, [\fIsize\fP] \fIis\fP the \fIsize\fP of the
virtual block device \fIin\fP '16G' format \fIwhere\fP the capital \fI.\fP
signifies gigabytes. If \fIpool\fP \fIis\fP specified, the disk gets
added on that \fIpool\fP
.TP
.B
\fIremove\fP
Removes \fI.\fP disk from the \fIguest\fP. Cannot \fIbe\fP disk0.
Usage: '\fIchyves\fP \fIremove\fP [\fIname\fP] [\fIdiskN\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP
the \fIname\fP of the \fIguest\fP, [\fIdiskN\fP] \fIis\fP the disk you would
like \fIto\fP \fIremove\fP from the \fIguest\fP. See '\fIchyves\fP \fIdisks\fP' for
\fI.\fP \fIlist\fP of \fIdisks\fP for \fI.\fP \fIguest\fP. If [-\fI.\fP] \fIis\fP \fIsupplied\fP before the
[\fIname\fP], there \fIis\fP no prompt \fIto\fP \fIremove\fP.
.TP
.B
\fIresize\fP
Resizes \fI.\fP disk. THIS CAN BREAK THINGS ON THE GUEST.
Usage: '\fIchyves\fP \fIresize\fP [\fIname\fP] [\fIdiskN\fP] [\fIsize\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP
the \fIname\fP of the \fIguest\fP, [\fIdiskN\fP] \fIis\fP the disk you would
like \fIto\fP \fIremove\fP from the \fIguest\fP, \fIand\fP [\fIsize\fP] \fIis\fP the \fIsize\fP
of the virtual block device \fIin\fP '16G' format \fIwhere\fP the
capital \fI.\fP signifies gigabytes.
See '\fIchyves\fP \fIdisks\fP' for \fI.\fP \fIlist\fP of \fIdisks\fP for \fI.\fP \fIguest\fP
.TP
.B
\fIdisks\fP
Lists the \fIdisks\fP attached \fIto\fP \fI.\fP \fIguest\fP.
Usage: '\fIchyves\fP \fIdisks\fP [\fIname\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP
of the \fIguest\fP operating system.
.TP
.B
\fIsnap\fP
Take \fI.\fP snapshot of \fI.\fP \fIguest\fP.
Usage: '\fIchyves\fP \fIsnap\fP [\fIname\fP]@[snapshot]' \fIwhere\fP [\fIname\fP] \fIis\fP the
\fIname\fP of the \fIguest\fP \fIand\fP [snapshot] \fIis\fP what you would
like \fIto\fP \fIname\fP the snapshot.
.TP
.B
\fIroll\fP
Rollback \fIguest\fP \fIto\fP \fI.\fP snapshot.
Usage: '\fIchyves\fP \fIroll\fP [\fIname\fP]@[snapshot]' \fIwhere\fP [\fIname\fP] \fIis\fP the
\fIname\fP of the \fIguest\fP \fIand\fP [snapshot] \fIis\fP what you would
like \fIto\fP \fIname\fP the snapshot.
.TP
.B
\fIclone\fP
Clone \fI.\fP \fIguest\fP.
This does \fInot\fP \fIclone\fP \fIin\fP the ZFS sense of the word.
If you want \fIto\fP use the \fIclone\fP \fIand\fP the original \fIguest\fP at the
same time you will need \fIto\fP change the \fItap\fP, con, \fIand\fP UUID properties
\fBor\fP use the -\fI.\fP \fIoption\fP \fIto\fP have \fIchyves\fP do this for you.
Usage: '\fIchyves\fP \fIclone\fP {-\fI.\fP|-\fI.\fP} {\fIname\fP} {clonename} [\fIpool\fP]' \fIwhere\fP {\fIname\fP}
\fIis\fP the \fIname\fP of the \fIguest\fP \fIand\fP {clonename} \fIis\fP what you would
like \fIto\fP \fIname\fP the new \fIclone\fP, \fIand\fP [\fIpool\fP] \fIis\fP optinally the destination
\fIpool\fP for the \fIclone\fP.
.TP
.B
\fIexport\fP
Export \fI.\fP \fIguest\fP \fIwith\fP all of it'\fI.\fP properties \fIand\fP \fIdisks\fP \fIto\fP \fI.\fP
GZip'\fI.\fP tarball. Property file \fIis\fP \fIin\fP \fI.\fP ucl-type format.
Disks output \fIto\fP \fI.\fP raw file, allowing for other managers using
ahci-hd emulation \fIto\fP use them. Tarball \fIis\fP put \fIin\fP the \fIguest\fP
dataset ex: /\fIchyves\fP/guestname/guestname.tar.gz
Usage: '\fIchyves\fP \fIexport\fP [\fIname\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP of the
\fIguest\fP.
.TP
.B
\fIconsole\fP
Consoles into \fI.\fP \fIguest\fP operating system. Utilizes \fBnmdm\fP(\fI.\fP) \fIand\fP
\fBcu\fP(\fI.\fP) \fIto\fP open \fI.\fP \fIconsole\fP on \fI.\fP \fIguest\fP operating system. Since
\fBbhyve\fP(\fI.\fP) does \fInot\fP emulate video. \fBThe\fP guests need \fIto\fP \fIbe\fP administered
via \fI.\fP serial communication device. Since \fIchyves\fP uses \fBcu\fP(\fI.\fP), you will
need \fIto\fP press the tilde (~) twice then period (.) \fIto\fP exit the
\fIconsole\fP. To exit type "~~." quickly, sometimes hitting Enter \fIis\fP
required first. If that fails exit the \fIconsole\fP, try pressing tilde
(~) then press Control + \fI.\fP (^\fI.\fP). Note that on some machines, you
cannot escape the \fIconsole\fP. See \fIconreset\fP below \fIto\fP escape all
consoles.
Usage: '\fIchyves\fP \fIconsole\fP [\fIname\fP]' \fIwhere\fP [\fIname\fP] \fIis\fP the \fIname\fP
of the \fIguest\fP operating system.
.TP
.B
\fIconreset\fP
Kills all running instances of "cu".
.TP
.B
dev
Allows for \fI.\fP function \fIto\fP \fIbe\fP called direct from command line \fIwhen\fP
developing for \fIchyves\fP. Requires dev_mode \fIto\fP \fIbe\fP \fIset\fP \fIwith\fP something
other than "off". This \fIis\fP globally \fIset\fP on the primary \fIpool\fP on
\(cq.config'. See "Global Configuration Properties" section above.
Usage: '\fIchyves\fP dev [<function>|<command>] "param1" \.\.\. "param7"'
\fBThe\fP parameters \fIare\fP function indexed \fIand\fP only seven parameters
\fIare\fP possible due \fIto\fP the way Bourne addresses \fIparameter\fP[10].
Double quotes \fIare\fP required for parameters \fIwith\fP strings, such as
commands.
.TP
.B
network
Used \fIto\fP store properties about associate network devices \fIand\fP creates
bridge \fIand\fP \fItap\fP interfaces. \fBThe\fP sub-commands below store properties
that \fIare\fP referenced \fIand\fP later \fIused\fP \fIto\fP recreated the network design
\fIwhen\fP starting \fI.\fP \fIguest\fP. \fBThe\fP host still requires configuration of the
vlan \fIand\fP physical interfaces. \fIchyves\fP will handle creating \fIand\fP
associating the \fItap\fP interfaces \fIwith\fP the appropriate bridge
interfaces \fIand\fP \fIalso\fP attaching those configured vlan \fIand\fP physical
interfaces \fIto\fP the bridges while starting \fI.\fP \fIguest\fP. Multiple bridges
\fIand\fP taps per \fIguest\fP \fIis\fP supported.
.RS
.TP
.B
\fIadd\fP
\fIchyves\fP network bridge{\fI.\fP} \fIadd\fP \fItap\fP{\fI.\fP}
Used \fIto\fP \fIadd\fP \fI.\fP \fItap\fP \fIto\fP \fI.\fP bridge interface.
.TP
.B
attach
\fIchyves\fP network bridge{\fI.\fP} attach iface{\fI.\fP}
Used \fIto\fP associate \fI.\fP vlan \fBor\fP physical interface \fIwith\fP \fI.\fP
bridge. Keep \fIin\fP mind that \fI.\fP physical \fBor\fP vlan interface
can only \fIbe\fP on \fIone\fP bridge group. See \fBifconfig\fP(\fI.\fP) for
details.
.TP
.B
default
\fIchyves\fP network bridge{\fI.\fP} default
Used \fIto\fP \fIset\fP the default bridge \fIto\fP use for newly created
guests.
.TP
.B
migrate
\fIchyves\fP network bridge{\fI.\fP} migrate bridge{\fI.\fP}
Used \fIto\fP migrate \fI.\fP \fIset\fP of \fItap\fP interfaces \fIand\fP outside
interface \fIto\fP an existing \fBor\fP new bridge interface. If
migrating \fIto\fP an existing bridge the outside interface \fIis\fP
overwritten \fIwith\fP the interface from the bridge being
migrated from \fIand\fP the \fItap\fP interface lists \fIare\fP combined.
.TP
.B
private
\fIchyves\fP network bridge{\fI.\fP} private
Used \fIto\fP \fIset\fP the bridge \fIto\fP private mode. This means there
\fIis\fP \fInot\fP an external network connected. This can \fIbe\fP useful
\fIwhen\fP sensitive data \fIis\fP being exchanged over \fI.\fP network
\fIbut\fP \fInot\fP necessarily needing outside access such as \fI.\fP SQL
database. This could \fIalso\fP \fIbe\fP \fIused\fP \fIwith\fP NAT. However NAT
support \fIis\fP \fInot\fP build into \fIchyves\fP.
.TP
.B
\fIremove\fP
\fIchyves\fP network bridge{\fI.\fP} \fIremove\fP \fItap\fP{\fI.\fP}
Used \fIto\fP \fIremove\fP \fI.\fP \fItap\fP from \fI.\fP bridge interface.
.RE
.TP
.B
\fIhelp\fP
Prints \fIversion\fP information \fIand\fP command \fIvalid\fP \fIsyntax\fP.
.SH EXAMPLES

Example of \fI.\fP multi-\fIpool\fP dataset hierarchy:
.PP
.nf
.fam C
  prim_pool/chyves/guests/
                  /guests/.defaults
                  /.config
                           pool_role=primary
                  /ISO
                  /Firmware
  secd_pool/chyves/guests
                  /.config
                          pool_role=secondary
  anther_pl/chyves/guests
                  /.config
                          pool_role=secondary
  offlinePL/chyves/guests
                  /.config
                          pool_role=offline

.fam T
.fi
Example of \fI.\fP single \fIpool\fP dataset hierarchy:
.PP
.nf
.fam C
  zroot/chyves/guests
              /guests/.defaults
              /.config
                      pool_role=primary
              /ISO
              /Firmware

.fam T
.fi
Setup \fIchyves\fP on zpool named zroot:
.PP
.nf
.fam C
  chyves setup zroot

.fam T
.fi
Configure bridge0 \fIto\fP use em0 as the outside interface:
.PP
.nf
.fam C
  chyves network bridge0 attach em0

.fam T
.fi
Change the default bridge \fIto\fP "bridge50"
.PP
.nf
.fam C
  chyves network bridge50 default

.fam T
.fi
Fetch FreeBSD \fIinstall\fP ISO for later:
.PP
.nf
.fam C
  chyves iso import ftp://ftp.example.org/FreeBSD-10.2-RELEASE-amd64.iso

.fam T
.fi
Create \fI.\fP new \fIguest\fP named bguest \fIwith\fP an \fI.\fP gigabyte HDD:
.PP
.nf
.fam C
  chyves create bguest 8G

.fam T
.fi
Create three new guests named "gst1", "gst2", \fIand\fP "gst3" each \fIwith\fP an \fI.\fP gigabyte
HDD on \fI.\fP \fIpool\fP called "dev-\fIpool\fP":
.PP
.nf
.fam C
  chyves create gst1,gst2,gst3 8G dev-pool

.fam T
.fi
List ISO'\fI.\fP:
.PP
.nf
.fam C
  chyves iso list

.fam T
.fi
Install the FreeBSD \fIguest\fP bguest:
.PP
.nf
.fam C
  chyves install bguest FreeBSD-10.2-RELEASE-amd64.iso

.fam T
.fi
Console into the installation:
.PP
.nf
.fam C
  chyves console bguest

.fam T
.fi
Once installation \fIis\fP done, exit \fIconsole\fP (~~.) \fIand\fP \fIdestroy\fP \fIguest\fP:
.PP
.nf
.fam C
  chyves destroy bguest

.fam T
.fi
Now that the \fIguest\fP \fIis\fP installed, it can \fIbe\fP started like usual:
.PP
.nf
.fam C
  chyves start bguest

.fam T
.fi
Some \fIguest\fP os'\fI.\fP can \fIbe\fP gracefully stopped:
.PP
.nf
.fam C
  chyves stop bguest

.fam T
.fi
List all guests created \fIwith\fP:
.PP
.nf
.fam C
  chyves list

.fam T
.fi
You can change \fIguest\fP properties \fIby\fP using \fIset\fP:
.PP
.nf
.fam C
  chyves set ram=512M bguest
  chyves set cpu=1  bguest
  chyves set tap=tap0  bguest
  chyves set con=nmdm0 bguest

.fam T
.fi
You can \fIalso\fP change multiple properties for \fIone\fP \fIguest\fP \fIin\fP \fIone\fP command \fIby\fP:
.PP
.nf
.fam C
  chyves set ram=512M bguest cpu=1 tap=tap0 con=nmdm0

.fam T
.fi
Or change multiple guests property \fIin\fP \fIone\fP command \fIby\fP:
.PP
.nf
.fam C
  chyves set ram=512M bguest,bguest2,bguest3 cpu=1 tap=tap0 con=nmdm0

.fam T
.fi
And even change multiple guests \fIand\fP multiple properties \fIin\fP \fIone\fP command \fIby\fP:
.PP
.nf
.fam C
  chyves set ram=512M bguest,bguest2,bguest3 cpu=1 bguest4 tap=tap0 con=nmdm0

.fam T
.fi
In the above example this changes the ram \fIto\fP 512M \fIand\fP cpu \fIto\fP \fI.\fP for bguest,
bguest2, \fIand\fP bguest3. Then on bguest4, \fItap\fP \fIis\fP \fIset\fP \fIto\fP tap0 \fIand\fP con \fIto\fP nmdm0.
.PP
Get \fI.\fP specific \fIguest\fP property:
.PP
.nf
.fam C
  chyves get ram bguest

.fam T
.fi
Get all \fIguest\fP properties:
.PP
.nf
.fam C
  chyves get all bguest

.fam T
.fi
Install \fIand\fP run \fI.\fP Debian \fIguest\fP:
.PP
.nf
.fam C
  chyves create debianvm 8G
  chyves set loader=grub-bhyve debianvm os=debian
  chyves install debianvm deb8.1-net.iso
  chyves start debianvm

.fam T
.fi
Take \fI.\fP snapshot of \fI.\fP \fIguest\fP:
.PP
.nf
.fam C
  chyves snap bguest@beforeupdate
  chyves list snapshots
  chyves roll bguest@beforeupdate

.fam T
.fi
Make \fI.\fP replicated \fIclone\fP of \fI.\fP \fIguest\fP:
.PP
.nf
.fam C
  chyves clone -r bguest bclone

.fam T
.fi
.SH AUTHOR
Justin \fI.\fP Holcomb -- @EpiJunkie
Trent -- @pr1ntf
.SH SEE ALSO
\fBbhyve\fP(\fI.\fP), \fBbhyveload\fP(\fI.\fP), \fBzfs\fP(\fI.\fP), \fBnmdm\fP(\fI.\fP), \fBcu\fP(\fI.\fP), \fBif_bridge\fP(\fI.\fP), grub2-\fBbhyve\fP(\fI.\fP),
\fBchyves-utils\fP(\fI.\fP), \fBvirtio\fP(\fI.\fP), \fBethers\fP(\fI.\fP)

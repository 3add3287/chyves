NAME
chyves(8) - bhyve(8) front end manager version 0.0.0

SYNOPSIS
chyves version
chyves setup pool=<pool> kmod=<0|1> net=<interface-name>
chyves list [iso|firmwares|snapshots|.config|.defaults|processes|<property-name>]
chyves list tap active
chyves list .config [<pool>|primary]
chyves list processes [<name>]
chyves info [-rvstdnakgil|-h]
chyves iso {list|fetch|rename|delete}
chyves iso list
chyves iso fetch {http-URL|ftp-URL|local-path}
chyves iso rename <oldname> <newname>
chyves iso delete <name>
chyves firmware {list|fetch|rename|delete}
chyves firmware list
chyves firmware fetch {http-URL|ftp-URL|local-path}
chyves firmware rename <oldname> <newname>
chyves firmware delete <name>
chyves create <name> [size] [pool]
chyves install <name> <iso-file>
chyves load [name] [path/to/bootdisk]
chyves boot [name] [runmode] [pcidevices]
chyves start <name> [-s | -a]
chyves stop <name>
chyves forcekill <name>
chyves scram
chyves destroy <name>
chyves rename <name> <newname>
chyves delete <name>
chyves set <property1>=<value> {<name>|.defaults} [prop2=value]...
chyves get {<property>|all} <name>
chyves rmpci [-f] [name] [pcidev:N]
chyves add [name] [size] [[pool]]
chyves remove [-f] [name] [diskN]
chyves resize [name] [diskN] [size]
chyves disks [name]
chyves snap <name>[@<snapshotname>]
chyves roll <name>[@<snapshotname>]
chyves clone [-c | -r] <name> <clonename>
chyves export <name>
chyves console <name> [-t]
chyves conreset
chyves help

SYNTAX NOMENCLATURE:
The following syntax nomenclature is used to signify when parameter is require
or optional and also to indicate.
 list             - Text without brackets are assumed to be required, "list" in
                    this case. These are typically sub commands.
 {require|list}   - A require list where one option much be used. '|' separate
                    options.
 [optional]       - An optional field
 [optional|list]  - An optional list, valid if not used. '|' separate options
 <user-input>     - User supplied input field. Required when not contain in [ ].
 [-abcdefg]       - An optional field but must start with a "-" and followed by
                    any combination, in any order. Eg. "-gca" is valid.
 name             - chyves guest name

DESCRIPTION
The chyves(8) Bourne shell script relies on the FreeBSD hypervisor bhyve(8),
zfs(8), nmdm(4), and cu(1) to start and manage type 2 virtualized guests.
Optionally grub2-bhyve and tmux(1) can be used to expand the capabilities of
chyves. chyves uses ZFS user properties, filesystems, and volumes to store
guests and resources in an organized hierarchy. chyves also uses the virtio
drivers built into the GENERIC kernel for network virtualization. The virtio
drivers are used to paravirtualize I/O for disk and network access.

For networking, a guest is presented a PCI Ethernet device, the host
communicates with this device through a tap interface which in-turn is connected
to a bridge interface.

For storage, guests are provided block storage device(s) via ZFS volumes from
the host. Datasets are used to organize these block devices and other important
data in a hierarchical structure. ZFS user properties are referenced when
starting a guest with bhyve and optional grub-bhyve. The properties contain
values such as the CPU count, RAM allotment, and other qualities about the
guest.

Single and multi-pool hosts are supported. Single pool hosts and pools set to
the 'primary' role are mounted to '/chyves' and additional ZFS pools get mounted
to '/chyves/<poolname>' and are set to a 'secondary' pool role. In the ZFS
dataset '$pool/chyves/.config', the chyves property 'dataset_role' is used to
store the role of that pool containing the chyves datasets. Valid values are
primary, secondary, and offline. Only one 'primary' dataset can be configured
per system, only the primary dataset contains the ISO and firmware resources,
and  only the primary pool contains the guests/.default dataset which is
referenced when setting properties for new guests. The primary pool is also is
where new guests are created when the [pool] argument is not specified with
chyves create. All other active pools need to be set as in the "secondary" role.
Pools set to the "offline" role are left untouched and is a good role to put a
local replicated backup.

PROPERTIES
One of the hallmarks of iocage, iohyve, and chyves is storing guests parameters
as ZFS user properties. For chyves there are three types of properties to set
and use: global configuration properties, per-guest properties, and default
properties for newly created guests.

Global Configuration Properties:
  One of the qualities that chyves capitalizes on is multi-pool configurations.
  Multiple pool configurations are quiet common in FreeNAS deployments,
  separated storage types (eg: SSD, HD, NVMe), and OS plus storage
  configurations. With multiple pools it becomes necessary to have roles for
  each pool. This is facilitated through the use of a dataset called '.config'
  where global and pool specific properties are stored. These are properties
  exists on the pool at '$pool/chyves/.config'.

  Single pool configurations are still supported and there is no loss in
  functionality. For single pool configurations the pool is set to the primary
  role.

  Usage: chyves get .config {primary|<pool>} <property>
  Usage: chyves set .config {primary|<pool>} <property>=<value>
  Usage: chyves list .config [pool]

  dataset_role={primary|secondary|offline}
    Vital in multi-pool configurations, each role type has different
    characteristics as explained below:
    primary - Pools in this role are utilized exclusively for the following
              purposes: Store ISO and Firmware resources. Reference point for
              global .config properties. New guest are defaulted to be created
              on this pool unless otherwise specified as a parameter for
              'chyves create'. Only one ZFS pool can be in the primary role per
              system and is the only role for single zpool configurations.
    secondary - Pools in this role are utilized for storing other active guests
              not stored on the primary ZFS pool.
    offline - Pools in this role are not utilized, this role is intended for
              backup. Guests on these pools can not be started and are hidden
              from most subcommands. To display only these guests use:
              'chyves info -i'
  dev_mode={off|on|-xvn}
    Setting to "on" for the primary pool activates the following developer
    features:
    Displays the full bhyve command used to start a guest.
    Allows for functions to be called direct from the command line using "chyves
    dev". Using the -xvn flags instead of the word "on" will use Bourne's "set"
    command to turn on special option flags during "chyves dev" execution. These
    flags can be used individually (-x|-v|-n) or combined (-xv). See sh(1).
  pool_version={pool-version}
    This is not a user settable property. This property indicates the
    the current version of the chyves pool. A check is ran before
    execution to ensure the version of the pool is compatible with
    the version of chyves. This ensures all the necessary properties
    are on the dataset. This mechanism is a matter of future proofing.
  restrict_new_property_names=[off|on]
    Setting to "on" allows for new properties to be created with 'chyves set'.
    The default is set to "off" to prevent creating new properties due to typos.
  console_start_offset={integer}
    This is a compatibility mechanism used to offset the first chyves null
    console modem number so that a collision is less likely with another
    application or bhyve front end manager. The initial default is set to "50".
  tap_start_offset={integer}
    This is a compatibility mechanism used to offset the first chyves tap
    interface so that a collision is less likely with another application or
    bhyve front end manager. The initial default is set to "50", valid values
    are from 0 to 32767.
  accept_non_standard_vlan_name={off|on}
    Setting to "on" disables vlan verification checks. This needs to be turned
    on when interface vlans names do not follow the "vlan{n}" naming
    nomenclature.

Guest Properties:
  These are properties used by chyves to specify the parameters to pass to bhyve
  and grub-bhyve when starting a guest.

  Usage: chyves get <property> {<name>}
  Usage: chyves get all {<name>}
  Usage: chyves list properties
  Usage: chyves list <property>
  Usage: chyves set <property1>=<value> {<name>} <property2>=<value>
         <property3>=<value>
  Usage: chyves set <property1>=<value> {<name>} <property2>=<value>
         <property3>=<value> {<name2>} <property1>=<value> <property2>=<value>

  ram=[nS]
    [n] is the number of bytes and [S] is the size in M megabytes or G gigabytes.
    Usage: ram=2G for 2 Gigabytes of RAM allocation.
  cpu=[n]
    Sets number [n] of cpu cores to use, up to 16.
  con=nmdm[n]
    Attaches null modem console. [n] must be a unique number and
    can not be shared between started guests.
  uuid= Sets UUID for bhyve instance. Normally set by /bin/uuidgen at creation.
  tap=tap{n}[,tap{n}]
    tap device(s) used for virtio-net
    {n} is a tap interface number to use.
    Taps are process locked and can not be shared by simultaneously by multiple
    guests. Specify multiple tap devices using a comma.
    Examples: chyves set tap=tap0 <name>
              chyves set tap=tap0,tap10,tap20,tap39 <name>
  mac_tap{n}={xx:xx:xx:yy:yy:yy}
    {n} is the tap interface to assign the specified MAC address to be attached
    to the network adapter inside the guest OS. The MAC address is an ASCII
    string in ethers(5) format.
    Example: "mac_tap10=58:9C:FC:00:00:00"
### For Future Use ###
  bridge{b}=tap[t][,tap{t}]
    Assigns tap interface(s) to a bridge interface.
    {t} is the tap number interfaces.
    {b} is the bridge interface number for the tap interface to be attached to.
    Examples: bridge0=tap
              bridge60=tap10
              bridge70=tap20
### For Future Use ###
  bridge_phy_attach[b]={<ethernet-interface>|<vlan-interface>|private}
    Assigns a physical or vlan interface to a bridge interface. A physical or
    vlan interface can only be assigned to one bridge. Using the word "private"
    creates a private network by not attaching an outside connections except
    other tap members assigned to the bridge interface.
    {b} is to specify the corresponding secondary tap number interfaces.
    {n} is the bridge interface to attach the first tap member.
    Examples: bridge_attach=em0
              bridge_attach60=vlan52
              bridge_attach70=private
  pcidev:{n}={spec}
    Advanced way to add devices to the guest. See bhyve(8) for complete details.
    {n} is the pcislot bus number, valid values are from 0 to 31.
    {spec} defines a virtual device added to the guest by using a bhyve -s
    argument without the pcislot or function argument. PCI slot numbers are
    assigned automatically by chyves.
    Examples: "pcidev:1=passthru,2/0/0"
              "pcidev:2=ahci-hd,/some/place/disk.img"
  os={operating-system}
    Supported values are freebsd, openbsd59, openbsd58, openbsd57, netbsd,
    debian, d8lvm, centos6, centos7, arch, gentoo and custom. Any other values
    are handled by a catch-all. There is no special handling for "freebsd"
    guests except when the CPU lacks the UG feature on Intel CPUs, then only
    guests with "freebsd" as the "os" property are allowed to start due to the
    CPU virtualization limitations.
  rcboot={0|<positive-integer>}
    Tells chyves to start guests upon host boot a positive integer is assigned.
    The integer represents the boot priority where the highest numbered guest is
    started first. The iohyve_enable="YES" directive must be configured in
    /etc/rc.conf for this to work. Using "0" disables starting guest on host
    boot.
  loader={bhyveload|uefi|grub-bhyve}
    Tells which loader to used to boot guest. bhyveload is for FreeBSD based
    guests, uefi is used for UEFI based guests, and grub-bhyve is used for all
    other guests.
  description=["<INSERT BRIEF DESCRIPTION>"]
    Used to describe guest. Use double quotes when description contains spaces.
  notes=["<INSERT FURTHER NOTES>"]
    Used to further describe guests. Use double quotes when description contains
    spaces.
  bargs
    For advanced users to pass additional flags directly to bhyve. See bhyve(8)
    for complete list of flag options. Not to be changed unless directed. For
    complete list of flags used by chyves when starting a specific guest, turn
    on global configuration "dev_mode" to "on".
  persist={0|1|2}
    Used to indicate how to handle when the bhyve process ends.
    [0] - Leave powered off when bhyve process closes
    [1] - Power off guest if shutdown state is detected, attempt to
          reboot otherwise. This is the default.
    [2] - Always attempt to reboot.

Default Guest Properties:
  These properties are referenced when creating new guests. The properties
  prefixed by 'disk_' are not recommended to be changed, you are likely to
  chainsaw your foot off and then massacre a nearby litter of kitten/puppies
  in the process. The guest section of properties have the same purpose as
  described in "Guest Properties" section above unless otherwise noted. Below
  are the defaults on a new installation of chyves for reference.

  size=8G
    Used during setup when the size field is omitted.
  default_bridge=bridge0
  bridge_phy_attach
    This property is initially set with "chyves setup net=<interface-name>"
  ram=256M
  cpu=1
  persist=1
  rcboot=0
  loader=bhyveload
  os=freebsd
  bargs-A_-H_-P
  disk_volmode=dev
  disk_volblocksize=512
  disk_dedup=inherit
  disk_compression=inherit
  disk_primarycache=inherit
  disk_secondarycache=inherit

OPTIONS
version     Prints the current running version of chyves

setup       Installs required ZFS datasets, loads the necessary kernel modules,
            and configures a tap and bridge interface for chyves.
            Usage: 'chyves setup pool=[poolname] kmod=[0|1] net=[iface]' where
            [poolname] is the pool you want to install chyves on, kmod=[0|1] is
            if you want chyves to load or unload the kernel modules. 1 is to
            load. net=[iface] will set up a network bridge to the specified
            interface.

list        Displays information about on general guest info with the no
            argument, "iso" will display ISOs resources, "snapshots" will
            display snapshots for all guests, "tap" will display all taps
            including inactive taps, "tap active" will list only active taps,
            and "con" will display configured consoles.

            $null       Lists properties about the guests and their disks
            using flags OS, Loader, and Description in a per pool table.
            to control level of output. Fields include CPU count, RAM, Disk
            Size, Pool, OS, Loader, Tap, Console, VMM status, Running status,
            rcboot flag, and the description.

            iso         Lists the ISO resources.

            firmwares   Lists the Firmware resources.

            snapshots   Lists all of the snapshots for all the guests. Does not
                        show snapshots of disks (they are there, though).

            tap         Lists all of the network taps taken by chyves guests
                        This will list taps that are not active as well. Using
                        the argument chyves list tap active displays only
                        active taps.

            con         Lists all of the nullmodem consoles taken by chyves
                        guests.

            info        Lists all the guests along with their RAM, CPU, Size,
                        OS, Loader, and Description (if -d is passed).

fetchiso    Fetches installation ISO or install image and creates a
            dataset for it.
            Usage: 'chyves fetchiso [URL]' where [URL] is the HTTP or FTP
            URL to fetchiso from the internet.

cpiso       Copies installation ISO or install image from your host and
            creates a dataset for it.
            Usage: 'chyves cpiso [path]' where [path] is the full path to
            ISO file on the host machine.

renameiso   Renames an ISO
            Usage: 'chyves renameiso [ISO] [newname]' where [ISO] is the
            name of the ISO you would like to rename. [newname]
            is a new name.

rmiso       Removes installed ISO from /chyves/ISO
            Usage: 'chyves rmiso [ISO]' where [ISO] is the name of the ISO
            you would like to delete.

fetchfw     Fetches firmware and creates a dataset for it.
            Usage: 'chyves fetchfw [URL]' where [URL] is the HTTP or FTP URL
            to fetch from the internet.

cpfw        Copies firmware from your host and creates a dataset for it.
            Usage: 'chyves cpfw [path]' where [path] is the full path to
            firmware file on the host machine.

renamefw    Renames a Firmware
            Usage: 'chyves renamefw [firmware] [newname]' where [firmware]
            is the name of the firmware you would like to rename.
            [newname] is a new name.

rmfw        Removes installed firmware from /chyves/Firmware
            Usage: 'chyves rmfw [firmware]' where [firmware] is the name of
            the firmware you would like to delete.

create      Creates new guest.
            Usage: 'chyves create {name} [size] [pool]' where {name} is
            the name you would like to use, [size] is the size of the
            virtual block device in '16G' format where the capital G
            signifies gigabytes, [pool] is the pool to create the guest on.

install     Loads and boots into ISO for guest installation.
            Usage: 'chyves install [name] [ISO]' where [name] is the name
            of the guest, and [ISO] is the name of the ISO you would
            like to boot from in the form of: 'install.iso'

load        Loads the guest operating system bootloader and resources.
            Usage: 'chyves load [name] [ISO]'
            where [name]is the name of the guest operating system.
            [bootimg] is the path to the boot medium


start       Starts the guest operating system. (Combines load & boot)
            Usage: 'chyves start [name] [-s | -a]'
            where [name] is the name of the guest operating system.
            [-s] will cause the guest to be started once
            [-a] will cause the guest to always restart

stop        Gracefully stops guest operating system.
            Usage: 'chyves stop [name]' where [name] is the name
            of the guest operating system.


forcekill   Forces the guest to stop. Runs kill -9 and destroys the guest
            in VMM. USE WITH EXTREME CAUTION AND AS A LAST RESORT. Can be
            used to kill guests stuck at the GRUB console that you
            do not have access to.

scram       Gracefully stop all bhyve guests. Does not destroy resources.

destroy     Destroys guest resources.
            Usage: 'chyves destroy [name]' where [name] is the name
            of the guest operating system. Destroying a guest does
            not [delete] a guest from the host, it destroys the guest in VMM.

rename      Renames the guest
            Usage: 'chyves rename [name] [newname]' where [name] is the
            name of the guest and [newname] is the new name.

delete      Permanently deletes all parameters and disks for a guest.
            Usage: 'chyves delete [name]' where [name] is the name
            of the guest. If [-f] is supplied before the
            [name], there is no prompt to delete.

set         Sets ZFS properties for guests one at a time.
            Usage: 'chyves set [name] [prop1=value] [prop2=value]...' where
            [name] is the name of the guest operating system.
            Using the [name] '.defaults' sets the default values for newly
            created guests. See properties section above for more detail.

get         Gets ZFS properties for guests
            Usage: 'chyves get [property] [name]' where [name] is the name of
            the guest. [property] is the property you want to view.
            Usage: 'chyves get all [name]' where [name] is the guest name. All
            properties are displayed.
            Usage: 'chyves get all' All properties are displayed.
            See properties section above for more detail.

rmpci       Removes a pcidev from the guest
            Usage: 'chyves rmpci [name] [pcidev:N]' where [name] is the name
            of the guest operating system. [pcidev:N] is the PCI
            device you want removed. Ex: 'pcidev:3' If [-f] is supplied
            before the [name], there is no prompt to remove.

add         Adds a new disk to the guest.
            Usage: 'chyves add [name] [size] [[pool]]' where [name] is
            the name of the guest, [size] is the size of the
            virtual block device in '16G' format where the capital G
            signifies gigabytes. If pool is specified, the disk gets
            added on that pool

remove      Removes a disk from the guest. Cannot be disk0.
            Usage: 'chyves remove [name] [diskN]' where [name] is
            the name of the guest, [diskN] is the disk you would
            like to remove from the guest. See 'chyves disks' for
            a list of disks for a guest. If [-f] is supplied before the
            [name], there is no prompt to remove.

resize      Resizes a disk. THIS CAN BREAK THINGS ON THE GUEST.
            Usage: 'chyves resize [name] [diskN] [size]' where [name] is
            the name of the guest, [diskN] is the disk you would
            like to remove from the guest, and [size] is the size
            of the virtual block device in '16G' format where the
            capital G signifies gigabytes.
            See 'chyves disks' for a list of disks for a guest

disks       Lists the disks attached to a guest.
            Usage: 'chyves disks [name]' where [name] is the name
            of the guest operating system.

snap        Take a snapshot of a guest.
            Usage: 'chyves snap [name]@[snapshot]' where [name] is the
            name of the guest and [snapshot] is what you would
            like to name the snapshot.

roll        Rollback guest to a snapshot.
            Usage: 'chyves roll [name]@[snapshot]' where [name] is the
            name of the guest and [snapshot] is what you would
            like to name the snapshot.

clone       Clone a guest. Note that this will clone all of the properties.
            If you want to use the clone and the original guest at the
            same time you will need to change the tap and nmdm properties
            or use the -r option to have chyves do this for you
            Usage: 'chyves clone [-c | -r] [name] [clonename]' where [name]
            is the name of the guest and [clonename] is what you would
            like to name the new clone.

export      Export a guest with all of it's properties and disks to a
            GZip'd tarball. Property file is in a ucl-type format.
            Disks output to a raw file, allowing for other managers using
            ahci-hd emulation to use them. Tarball is put in the guest
            dataset ex: /chyves/guestname/guestname.tar.gz
            Usage: 'chyves export [name]' where [name] is the name of the
            guest.

console     Consoles into a guest operating system. Utilizes nmdm(4) and
            cu(1) to open a console on a guest operating system. Since
            bhyve(8) does not emulate video. The guests need to be administered
            via a serial communication device. Since chyves uses cu(1), you will
            need to press the tilde (~) twice then period (.) to exit the
            console. To exit type "~~." quickly, sometimes hitting Enter is
            required first. If that fails exit the console, try pressing tilde
            (~) then press Control + D (^D). Note that on some machines, you
            cannot escape the console. See conreset below to escape all
            consoles.
            Usage: 'chyves console [name]' where [name] is the name
            of the guest operating system.

conreset    Kills all running instances of "cu".

dev         Allows for command to be called direct from command line when
            developing for chyves. Requires the dev_mode=on to be globally set
            on the primary pool on '.config'.
            Usage: 'chyves dev [<function>|<command>] "param1" ... "param7"'
            The parameters are function indexed and only seven parameters
            are possible due to the way Bourne addresses parameter[10].
            Double quotes are required for parameters with strings, such as
            commands.

help        Prints version information and command valid syntax.

EXAMPLES

Example of a multi-pool dataset hierarchy:

  prim_pool/chyves/guests/
                  /guests/.defaults
                  /.config
                           chyves:pool_role=primary
                  /ISO
                  /Firmware
  secd_pool/chyves/guests
                  /.config
                          chyves:pool_role=secondary
  anther_pl/chyves/guests
                  /.config
                          chyves:pool_role=secondary
  offlinePL/chyves/guests
                  /.config
                          chyves:pool_role=offline

Example of a single pool dataset hierarchy:

  zroot/chyves/guests
              /guests/.defaults
              /.config
                      chyves:pool_role=primary
              /ISO
              /Firmware

Setup chyves on zpool named zroot:

  chyves setup pool=zroot

Fetch FreeBSD install ISO for later:

  chyves iso fetch ftp://ftp.freebsd.org/.../FreeBSD-10.2-RELEASE-amd64.iso

Create a new FreeBSD guest named bsdguest with an 8 Gigabyte virtual HDD:

  chyves create bsdguest 8G

List ISO's:

  chyves list iso

Install the FreeBSD guest bsdguest:

  chyves install bsdguest FreeBSD-10.2-RELEASE-amd64.iso

Console into the installation:

  chyves console bsdguest

Once installation is done, exit console (~~.) and destroy guest:

  chyves destroy bsdguest

Now that the guest is installed, it can be started like usual:

  chyves start bsdguest

Some guest os's can be gracefully stopped:

  chyves stop bsdguest

List all guests created with:

  chyves list

You can change guest properties by using set:

  chyves set bsdguest ram=512M
  chyves set bsdguest cpu=1
  chyves set bsdguest tap=tap0
  chyves set bsdguest con=nmdm0

Get a specific guest property:

  chyves get ram bsdguest

Get all guest properties:

  chyves get all bsdguest

Install and run a Debian guest:

  chyves create debianvm 8G
  chyves set debianvm loader=grub-bhyve os=debian
  chyves install debianvm deb8.1-net.iso
  chyves start debianvm

Take a snapshot of a guest:

  chyves snap bsdguest@beforeupdate
  chyves list snapshots
  chyves roll bsdguest@beforeupdate

Make an independent clone of a guest:

  chyves clone bsdguest dolly

AUTHOR
Justin D Holcomb -- @EpiJunkie
Trent -- @pr1ntf

SEE ALSO
bhyve(8), bhyveload(8), zfs(8), nmdm(4), cu(1), if_bridge(4), grub2-bhyve(8),
chyves-utils(8), virtio(4), ethers(5)

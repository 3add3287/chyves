NAME
chyves(8) - bhyve(8) front end manager version 0.0.0

SYNOPSIS
chyves version
chyves setup pool=<pool> kmod=<0|1> net=<interface-name>
chyves list [null|iso|firmwares|snapshots|.config|.defaults|pools|processes|
             <property-name>]
chyves list tap active
chyves list .config [<pool>|primary]
chyves list processes [<name>]
chyves info [-rvstdnakgil|-h]
chyves iso {list|import|rename|delete}
chyves iso list
chyves iso import {http-URL|ftp-URL|local-path}
chyves iso rename <oldname> <newname>
chyves iso delete <name>
chyves firmware {list|import|rename|delete}
chyves firmware list
chyves firmware import {http-URL|ftp-URL|local-path}
chyves firmware rename <oldname> <newname>
chyves firmware delete <name>
chyves create <name> [size] [pool]
chyves install <name> <iso-file>
chyves start <name> [-s | -a]
chyves stop <name>
chyves forcekill <name>
chyves scram
chyves destroy <name>
chyves rename <name> <newname>
chyves delete <name>
chyves set <property1>=<value> {<name>|.defaults} [prop2=value]...
chyves get {<property>|all} <name>
chyves rmpci [-f] [name] [pcidev:N]
chyves add [name] [size] [[pool]]
chyves remove [-f] [name] [diskN]
chyves resize [name] [diskN] [size]
chyves disks [name]
chyves snap <name>[@<snapshotname>]
chyves roll <name>[@<snapshotname>]
chyves clone {-c|-r} <name> <clonename>
chyves export <name>
chyves console <name> [-t]
chyves conreset
chyves help

SYNTAX NOMENCLATURE:
The following syntax nomenclature is used to signify when parameter is require
or optional and also to indicate.
 list             - Text without brackets are required.
 {require|list}   - A require list where one option must be used. '|' separate
                    options.
 [optional]       - An optional field
 [optional|list]  - An optional list, valid if not used. '|' separate options
 <user-input>     - User supplied input field. Required when not contain in [ ].
 [-abcdefg]       - An optional field but must start with a "-" and followed by
                    any combination, in any order. Eg. "-gca" is valid.
 name             - chyves guest name

DESCRIPTION
The chyves(8) Bourne shell script relies on the FreeBSD hypervisor bhyve(8),
zfs(8), nmdm(4), and cu(1) to start and manage type 2 virtualized guests.
Optionally grub2-bhyve and tmux(1) can be used to expand the capabilities of
chyves. chyves uses ZFS user properties, filesystems, and volumes to store
guests and resources in an organized hierarchy. chyves also uses the virtio
drivers built into the GENERIC kernel for network virtualization. The virtio
drivers are used to paravirtualize I/O for disk and network access.

For networking, a guest is presented a PCI Ethernet device, the host
communicates with this device through a tap interface which in-turn is connected
to a bridge interface which optionally can be attached to a physical or vlan
interface. If the bridge is not connected physical or vlan interface the bridge
must be put into "private" mode. A private bridge allows sensitive traffic to
transverse the bridge without the possibility of traffic being monitored from an
outside network.

VALE support is experimentally provided as a proof of concept. VALE support is
not widely implemented and is feature limited at it's current development stage.
To use VALE requires that 'device netmap' be compiled into the kernel and that
'vale-ctl' be compiled from '/usr/src/tools/tools/netmap' and moved to $PATH
directory. VALE natively support em(4),	igb(4),	ixgbe(4), lem(4), and re(4) and
all other NICs must use emulation which may (significantly) reduce performance.
See netmap(4) for more information see. That said, VALE interfaces are added to
a guest the same way a tap interface is added using:
"chyves network add vale{n}[:{p}]" where {n} is the vale switch you want to use
and optionally :{p} specifies the port on that switch.

For storage, guests are provided block storage device(s) via ZFS volumes from
the host. Datasets are used to organize these block devices and other important
data in a hierarchical structure. ZFS user properties are referenced when
starting a guest with bhyve and optional grub-bhyve. The properties contain
values such as the CPU count, RAM allotment, and other qualities about the
guest.

Single and multi-pool hosts are supported. Single pool hosts and pools set to
the 'primary' role are mounted to '/chyves' and additional ZFS pools get mounted
to '/chyves/<poolname>' and are set to a 'secondary' pool role. In the ZFS
dataset '$pool/chyves/.config', the chyves property 'dataset_role' is used to
store the role of that pool containing the chyves datasets. Valid values are
primary, secondary, and offline. Only one 'primary' dataset can be configured
per system, only the primary dataset contains the ISO and firmware resources,
and only the primary pool contains the guests/.default dataset which is
referenced when setting properties for new guests. The primary pool is also
where new guests are created when the [pool] argument is not specified with
chyves create. All other active pools are set to the "secondary" role. Pools set
to the "offline" role are left untouched and is a good role to put a local
replicated backup. The primary pool is critical to the operation of chyves.
Without a primary pool set only the "setup" sub-command is allowed to run. The
first pool to be setup on the system is the primary pool.

Multi-guest support is the ability to specify multiple guest names that are
comma separate for a sub-command. Not all sub-commands have this functionality
but the ones that do, allow for rapid execution of the same command over many
guests, this can be incredibly helpful for a fleet of VMs. The following
sub-commands support multi-guest and are provided with a complex example below:
  chyves clone -r goldenVM devteam1,devteam2,devteam3 dev-pool
  chyves create g1,g2,g3 8G ssd-pool

PROPERTIES
One of the hallmarks of iocage, iohyve, and chyves is storing guests parameters
as ZFS user properties. For chyves there are three types of properties to set
and use: global configuration properties, per-guest properties, and default
properties for newly created guests.

Global Configuration Properties:
  One of the qualities that chyves capitalizes on is multi-pool configurations.
  Multiple pool configurations are quiet common in FreeNAS deployments,
  separated storage types (eg: SSD, HD, NVMe), and OS plus storage
  configurations. With multiple pools, it becomes necessary to have roles for
  each pool. This is facilitated through the use of a dataset called '.config'
  where global and pool specific properties are stored.

  Single pool configurations are still supported and there is no loss in
  functionality. As the first pool is always set as the primary pool no changes
  are unique for single pool configurations.

  Many of these global properties are not recommended to be changed unless you
  understand the scope of their impact or are managed through subcommands such
  as 'chyves network'

  Usage: chyves get <property> .config
         chyves set <property>=<value> .config
         chyves list .config [pool]

  auto_load_kernel_mods={yes|no}
    When set to "yes", chyves will load the kernel modules necessary for guests.
    When set to "no", chyves will simply check if the modules are loaded and
    exit with a message if not loaded.
  bridge{n}_phy_attach={<interface>|private}
    This property contains a physical or vlan interface name for a bridge
    to belong. When set to "private" the bridge is not joined with a outside
    network.
    Example values: bridge0_attach=em0
                    bridge10_phy_attach=vlan52
                    bridge512_phy_attach=private
    To set this property use the follow command syntax:
      chyves network bridge{n} attach {<interface>|private}
  bridge{n}_tap_members={tap{n}[,tap{n},tap{n}]}
    This property is a comma separated list of the tap members for bridge{n},
    where {n} is the interface number. Valid values for "n" are 0 to 32768.
    Guests are automatically added to this property using the bridge{n} that is
    set in .defaults under the "bridge" property.
    Examples values: bridge0_tap_members=tap0
                     bridge70_tap_members=tap20,tap30
    A tap can be moved to another bridge by first removing the tap from the
    original bridge and adding to the desired bridge. Use the following command
    syntax to do this:
      chyves network bridge{n} remove tap{n}
      chyves network bridge{n} add tap{n}
  console_start_offset={integer}
    This is a compatibility mechanism used to offset the first chyves null
    console modem number so that a collision is less likely with another
    application or bhyve front end manager. The initial default is set to "50".
  consolidate_bhyve_pci_devices={no|yes}
    The default is set to "no" as it may have performance implications, however
    this may be necessary if more than 26 PCI devices are connect to a guest.
    This property signals the bhyve string generators to use PCI functions for
    similar devices. In ideal conditions up to 208 PCI devices can be attached
    when set to "yes".
  dataset_role={primary|secondary|offline}
    Vital in multi-pool configurations, each role type has different
    characteristics as explained below:
    primary - Pools in this role are utilized exclusively for the following
              purposes: Store ISO and Firmware resources. Reference point for
              global .config properties. New guest are defaulted to be created
              on this pool unless otherwise specified as a parameter for
              'chyves create'. Only one ZFS pool can be in the primary role per
              system and is the only role for single zpool configurations.
    secondary - Pools in this role are utilized for storing other active guests
              not stored on the primary ZFS pool.
    offline - Pools in this role are not utilized, this role is intended for
              backup. Guests on these pools can not be started and are hidden
              from most subcommands. To display only these guests use:
              'chyves info -i'
  dev_mode={off|on|-xvn}
    Setting to "on" for the primary pool activates the following developer
    features:
    Displays the full bhyve command used to start a guest.
    Allows for functions to be called direct from the command line using "chyves
    dev". Using the -xvn flags instead of the word "on" will use Bourne's "set"
    command to turn on special option flags during "chyves dev" execution. These
    flags can be used individually (-x|-v|-n) or combined (-xv). See sh(1).
  pool_version={pool-version}
    This is not a user settable property. This property indicates the
    the current version of the chyves pool. A check is ran before
    execution to ensure the version of the pool is compatible with
    the version of chyves. This ensures all the necessary properties
    are on the dataset. This mechanism is a matter of future proofing.
  restrict_new_property_names=[off|on]
    Setting to "on" allows for new properties to be created with 'chyves set'.
    The default is set to "off" to prevent creating new properties due to typos.
  tap_start_offset={integer}
    This is a compatibility mechanism used to offset the first chyves tap
    interface so that a collision is less likely with another application or
    bhyve front end manager. The initial default is set to "50", valid values
    are from 0 to 32767.
  tap_up_by_default={off|on}
    When set to "yes", the sysctl: net.link.tap.up_on_open is set to "1" when
    running script. Default is "on" but it is recommended to set to "off" and
    update your /boot/loader.conf to set this sysctl.
  vlan_iface_base_name=<vlan_base_name>
    When using a non-standard vlan naming nomenclature this needs to reflect the
    change. The default is "vlan" when using the standard "vlan{n}" naming
    nomenclature.
  uefi_vnc_port_start_offset={integer}
    This is a convenience mechanism used to offset the first VNC port used by
    UEFI guests. The initial default is set to "5900", valid values are from
    1025 to 65536.

Guest Properties:
  These are properties used by chyves to specify the parameters to pass to bhyve
  and grub-bhyve when starting a guest.

  Usage: chyves get <property> {<name>}
  Usage: chyves get all {<name>}
  Usage: chyves list properties
  Usage: chyves list <property>
  Usage: chyves set <property1>=<value> {<name>} <property2>=<value>
         <property3>=<value>
  Usage: chyves set <property1>=<value> {<name>} <property2>=<value>
         <property3>=<value> {<name2>} <property1>=<value> <property2>=<value>

  ram=[nS]
    [n] is the number of bytes and [S] is the size in "K" kilobytes, "M"
    megabytes,  "G" gigabytes, or "T" terabytes.
    Usage: ram=2G for 2 Gigabytes of RAM allocation.
  clone
    Used to indicate the clone relationship when the guest is clone using
    'chyves clone -c'. Not user settable property.
    Valid values: -|parent|child
  clone-assc
    Used to indicate the associated clone guests. For children this would
    indicate the parent's guest name. For a parents this would be all
    all the child guests, comma separated if more than one. Not user settable
    property.
  cpu=[n]
    Sets number [n] of cpu cores to use, up to 16.
  con=nmdm[n]
    Attaches null modem console. [n] must be a unique number and
    can not be shared between started guests.
  uuid= Sets UUID for bhyve instance. Set by /bin/uuidgen at creation.
  net_ifaces=tap{n}|vale{n}[:{p}]
    tap and vale device(s) attached using virtio-net
    Where {n} is a tap interface number to use for tap interfaces. Taps are
    process locked and can not be shared simultaneously by multiple guests.
    Specify multiple tap devices using a comma.
    Examples: chyves set net_ifaces=tap0 <name>
              chyves set net_ifaces=tap0,tap10,tap39 <name>
    VALE support is experimentally provided with disclaimers above. VALE
    interfaces are added to guest using the same method as a tap interface. VALE
    interface names must be vale{n}[:{p}] where {n} can be alpha-numeric up to
    9 characters long and optionally a port can be specified where [:{p}] starts
    with a separating colon and either a single alphabetical character or a
    number 0-9999. VALE interfaces are clever in that the interface is commonly
    shared between other guests connecting to that 'virtual' VALE switch.
    Examples: chyves set net_ifaces=vale0 <name>
              chyves set net_ifaces=vale123456789:9999 <name>
              chyves set net_ifaces=tap0,tap10,tap39,vale0,vale123:a <name>
  os={operating-system}
    Supported values are openbsd59, openbsd58, openbsd57, netbsd, debian, d8lvm,
    centos6, centos7, arch, gentoo and custom. Any other values are handled by a
    catch-all.
  rcboot={0|<positive-integer>}
    Tells chyves to start guests upon host boot a positive integer is assigned.
    The integer represents the boot priority where the highest numbered guest is
    started first. The iohyve_enable="YES" directive must be configured in
    /etc/rc.conf for this to work. Using "0" disables starting guest on host
    boot.
  loader={bhyveload|uefi|grub-bhyve}
    Tells which loader to used to boot guest. bhyveload is for FreeBSD based
    guests, uefi is used for UEFI based guests, and grub-bhyve is used for all
    other guests.
  description=["<INSERT BRIEF DESCRIPTION>"]
    Used to describe guest. Use double quotes when description contains spaces.
  notes=["<INSERT FURTHER NOTES>"]
    Used to further describe guests. Use double quotes when description contains
    spaces.
  bargs
    For advanced users to pass additional flags directly to bhyve. See bhyve(8)
    for complete list of flag options. Not to be changed unless directed. For
    complete list of flags used by chyves when starting a specific guest, turn
    on global configuration "dev_mode" to "on".
  fw=<firmware-resource-name>
    Firmware file loaded to boot UEFI guests.
  uefi_console_output=vnc|serial
    When set to "serial" UEFI guests will use the standard serial interface.
    Guests set to "vnc" will use a VNC connection on supported hosts. VNC output
    is experimental and introduced to bhyve in May 2016. VNC support requires
    11-CURRENT (r300097), a modified bhyve binary with graphics support, and the
    UEFI firmware "BHYVE_UEFI_20160526.fd".
  uefi_mouse_type=ps2|usb3
    This property is only used when the property "uefi_console_output" is set
    to "vnc". When set to "ps2" a PS/2 mouse is connected to the guest. When
    set "usb3" a USB 3.0 tablet is emulated which provides much better mouse
    performance but is only supported on newer guest OSes.
  uefi_vnc_port=1025-65536
    Specifies the port for the host to listen on for VNC connections for the
    guest.
  uefi_vnc_ip=x.x.x.x
    Specifies the IP for the host to bind-to for VNC connections for the
    guest. The default is "0.0.0.0" which binds to all IPs on the host.
  uefi_vnc_res=<width>x<height>
    Specifies the resolutions the VNC client will connect with. The following
    resolutions are supported:
      1920x1200
      1920x1080
      1600x1200
      1600x900
      1280x1024
      1280x720
      1024x768
      800x600
      640x480
  uefi_pause_until_vnc_client_connect={on|off}
    When set to "on" the guest will wait to boot until a VNC client connects.
    This is helpful for installations requiring a key press for a short timing
    window after starting.

Default Guest Properties:
  These properties are referenced when creating new guests. The guest section of
  properties have the same purpose as described in "Guest Properties" section
  above, unless otherwise noted. Below are the defaults values on a fresh
  installation of chyves for reference.

  bargs="-A -H -P"
  bridge=bridge0
    Used to set the default bridge interface to join tap interfaces to.
  cpu=1
  bridges=bridge0
  loader=bhyveload
  os=default
  persist=1
  ram=256M
  rcboot=0
  size=8G
    Used during setup when the size field is omitted. No longer a guest
    property. The ZFS property "usedbychildren" is used to show the size in
    'chyves info'.
  uefi_console_output=serial
  uefi_mouse_type=ps2
  uefi_vnc_ip=0.0.0.0
  uefi_vnc_res=800x600
  uefi_pause_until_vnc_client_connect=no

  These default disk properties are direct ZFS values used to create disks for
  the guest. These properties are not recommended to be changed, you are liable
  to chainsaw your foot off and then massacre a nearby litter of kitten/puppies
  in the process. You have been warned. The value "inherit" will inherit the
  value set by the (*grand)parents. See zfs(8) on settable values but remember,
  think of the kittens and puppies.
    disk_volmode=dev
    disk_volblocksize=512
    disk_dedup=inherit
    disk_compression=inherit
    disk_primarycache=inherit
    disk_secondarycache=inherit

Manually Setting Properties - Expert Level:
  WARNING: dragons reside here, so think of the kittens and puppies.

  There are occasions when setting a property that is not defined above is
  desired. Such a case would be to: attach a PCI passthrough device, a rand
  device, or even setting virtio-block options for a disk.

  It is always possible to manually set a property with zfs(8) directly, however
  it is not recommended as there are no filters to restrict typos, incorrect
  property names, or invalid values. That said if you willing to take the risk
  and because this is Unix and the line between daft things and brilliant things
  is often thin, the zfs command to set the "cpu" value to 8 for "guest1" on
  pool "zroot" would be:
    zfs set chyves:cpu=8 zroot/chyves/guests/guest1

  There are some properties which chyves looks for but are entirely optional and
  are only documented in this section. These values do no appear unless
  explicitly set with zfs by the end user, however chyves does check to see if
  these properties exist and will utilize them if provided.

  Guest Property:
    pcidev:{n}={bhyve-pci-dev}
      Set on a guest.
      These PCI devices are attached to the guest when starting. {n} is
      completely arbitrary and is only a matter of the order of attachment.
      {bhyve-pci-dev} is the bhyve PCI device to attach, see below for common
      uses or see bhyve(8) for a complete list.

      To set a PCI passthrough device for the same guest, where 3 and 4 are
      arbitrary values and 9/0/0 and 9/0/1 are the bus/slot/function of the PCI
      device on the host.
        zfs set chyves:pcidev:3=passthru,9/0/0 zroot/chyves/guests/guest1
        zfs set chyves:pcidev:4=passthru,9/0/1 zroot/chyves/guests/guest1

      For PCI passthrough devices, devices sharing the same PCI slot on the host
      are attached to the same virtual PCI slot within the guest. This is due to
      the potential for kernel panics. The arbitrary numbers are irrelevant
      and do not need to be in order of the function level of the PCI device.

      To create a virtio RNG interface then the command would be
        zfs set chyves:pcidev:5=virtio-rnd zroot/chyves/guests/guest1

    tap{n}_mac={xx:xx:xx:yy:yy:yy}
      {n} is the tap interface to assign the specified MAC address to be
      attached to the network adapter inside the guest OS. The MAC address is an
      ASCII string in ethers(5) format.
        zfs set chyves:tap10_mac=58:9C:FC:00:00:00 zroot/chyves/guests/guest1

  Disk virtio-block options Property:
    virtio_block_options=[nocache[,direct][,ro][,sectorsize=logical[/physical]]]
      Set on a guest's disk, this is a per disk setting.
      This property is used to append bhyve virtio-block options to a disk when
      starting the guest. While there is a very limited use case of this option
      they can be utilized. See bhyve(8) for what these options do. Keep in mind
      that the logical sectorsize is already used by chyves and pulled from the
      zvol's volblocksize ZFS property WHEN virtio_block_options is not set.
      When the property "virtio_block_options" exists, the sectorsize is no
      longer automatically populated to prevent collision. To set this property:
        zfs inherit chyves:virtio_block_options=direct,sectorsize=512/4096 \
        zroot/chyves/guests/guest1/disk0

  After a property is created, chyves will allow you to modify the value of that
  property.

  To remove a property from a guest, use the following command:
    zfs inherit chyves:cpu zroot/chyves/guests/guest1

SUB-COMMANDS
version     Prints the current running version of chyves

setup       Installs ZFS datasets and properties on pool.
            Usage: 'chyves setup [pool]'
            Where [pool] is the pool you want to install chyves on.

list        Displays information about on general guest info with the no
            argument, "iso" will display ISOs resources, "snapshots" will
            display snapshots for all guests, "tap" will display all taps
            including inactive taps, "tap active" will list only active taps,
            and "con" will display configured consoles.

            $null       Lists properties about the guests and their disks
                        using flags OS, Loader, and Description in a per pool
                        table.

            iso         Lists the ISO resources.

            firmwares   Lists the firmware resources.

            snapshots   Lists all of the snapshots for all the guests. Does not
                        show snapshots of disks (they are there, though).

            .config     Lists all the .config properties for all the chyves
                        pools.

            .config [<pool-name>|primary] List all the config properties for a
                        chyves pool. The word "primary" can be used instead of
                        the primary pool's name.

            pools       Lists all the pools and their roles. Helpful when no
                        guests have been created.

            processes   Lists all the processes *hyve processes.

            processes [<name>] Lists all the processes *hyve processes for a
                        guest.

            bridges     Lists each the bridge with the associated taps and
                        outside interface.

            <guest-property> List the property given for all the guests. See
                        "Guest Properties" section above for a list

            tap active  List all the tap interfaces from /dev/tap*

info        Lists all the guests along with their RAM, CPU, Size,
            OS, Loader, and Description (if -d is passed). To control level of
            output flags are used. Fields include CPU
            count, RAM, Disk Size, Pool, OS, Loader, Tap, Console,
            VMM status, Running status, rcboot flag, and the
            description.

iso         Handles ISO resources.

            import      chyves iso import {URL|<local-path-to-iso>}
                        Imports an ISO resource into chyves. Either a local or
                        remote source can be give. Remote sources can be from
                        http or ftp. The user is prompted for a file hash when
                        a remote source is given. After the download completes
                        the file hash is compared with what is actually hashed.
                        MD5, SHA1, SHA256, and SHA512 are currently supported.
                        If the hashes mis-match then the user is prompted to
                        optionally delete the file. If no hash is supplied, the
                        user is heckled.

                        Supplied ISO resources can be compressed with current
                        support for files ending in .xz and .gz. Upon import
                        these files are extracted.

            rename      chyves iso rename {ISO-name} <desired-name>
                        Rename an ISO resource.

            delete      chyves iso delete {ISO-name}
                        Delete an ISO resource.

            list        chyve iso list
                        List available ISO resources.

firmware    Handles firmware resources.

            import      chyves iso import {URL|<local-path-to-iso>}
                        Imports a firmware resource into chyves. Either a local
                        or remote source can be give. Remote sources can be from
                        http or ftp.

            rename      chyves firmware rename {firmware-name} <desired-name>
                        Rename an firmware resource.

            delete      chyves firmware delete {firmware-name}
                        Delete an firmware resource.

            list        chyve firmware list
                        List available firmware resources.

create      Creates new guest.
            Usage: chyves create {name} [size] [pool]
            Where <name> is an uniquely identifying name used to reference the
            guest, optionally [size] is the size of the block device in '8G'
            format where the capital 'G' signifies gigabytes, and optionally
            [pool] is the pool to create the guest on in multi-pool
            configurations. The pool is defaulted to the primary pool if not
            given. If [size] is not supplied, then 'size' in .default is used.
            The tap interface is added and associated with the bridge set in
            .default as well. Support multi-guest specification.

install     Loads and boots into ISO for guest installation.
            Usage: 'chyves install {name} {ISO}' where {name} is the name of the
            guest, and {ISO} is the name of the ISO resource you would like to
            boot from in the form of: 'install.iso'

start       Starts the guest.
            Usage: 'chyves start [name] [-s | -a]'
            where [name] is the name of the guest operating system.
            [-s] will cause the guest to be started once
            [-a] will cause the guest to always restart

stop        Gracefully stops guest operating system.
            Usage: 'chyves stop [name]' where [name] is the name
            of the guest operating system.


forcekill   Forces the guest to stop. Runs kill -9 and destroys the guest
            in VMM. USE WITH EXTREME CAUTION AND AS A LAST RESORT. Can be
            used to kill guests stuck at the GRUB console that you
            do not have access to.

scram       Gracefully stop all bhyve guests. Does not destroy resources.

destroy     Destroys a guest's VMM resources.
            Usage: 'chyves destroy [name]' where [name] is the name
            of the guest operating system. Destroying a guest does
            not [delete] a guest from the host, it destroys the guest in VMM.

rename      Renames the guest
            Usage: 'chyves rename [name] [newname]' where [name] is the
            name of the guest and [newname] is the new name.

delete      Permanently deletes all parameters and disks for a guest.
            Usage: 'chyves delete [name]' where [name] is the name
            of the guest. If [-f] is supplied before the
            [name], there is no prompt to delete.

set         Sets ZFS properties for guests one at a time.
            Usage: 'chyves set [name] [prop1=value] [prop2=value]...' where
            [name] is the name of the guest operating system.
            Using the [name] '.defaults' sets the default values for newly
            created guests. See properties section above for more detail.

get         Gets ZFS properties for guests
            Usage: 'chyves get [property] [name]' where [name] is the name of
            the guest. [property] is the property you want to view.
            Usage: 'chyves get all [name]' where [name] is the guest name. All
            properties are displayed.
            Usage: 'chyves get all' All properties are displayed.
            See properties section above for more detail.

rmpci       Removes a pcidev from the guest
            Usage: 'chyves rmpci [name] [pcidev:N]' where [name] is the name
            of the guest operating system. [pcidev:N] is the PCI
            device you want removed. Ex: 'pcidev:3' If [-f] is supplied
            before the [name], there is no prompt to remove.

add         Adds a new disk to the guest.
            Usage: 'chyves add [name] [size] [[pool]]' where [name] is
            the name of the guest, [size] is the size of the
            virtual block device in '16G' format where the capital G
            signifies gigabytes. If pool is specified, the disk gets
            added on that pool

remove      Removes a disk from the guest. Cannot be disk0.
            Usage: 'chyves remove [name] [diskN]' where [name] is
            the name of the guest, [diskN] is the disk you would
            like to remove from the guest. See 'chyves disks' for
            a list of disks for a guest. If [-f] is supplied before the
            [name], there is no prompt to remove.

resize      Resizes a disk. THIS CAN BREAK THINGS ON THE GUEST.
            Usage: 'chyves resize [name] [diskN] [size]' where [name] is
            the name of the guest, [diskN] is the disk you would
            like to remove from the guest, and [size] is the size
            of the virtual block device in '16G' format where the
            capital G signifies gigabytes.
            See 'chyves disks' for a list of disks for a guest

disks       Lists the disks attached to a guest.
            Usage: 'chyves disks [name]' where [name] is the name
            of the guest operating system.

snap        Take a snapshot of a guest.
            Usage: 'chyves snap [name]@[snapshot]' where [name] is the
            name of the guest and [snapshot] is what you would
            like to name the snapshot.

roll        Rollback guest to a snapshot.
            Usage: 'chyves roll [name]@[snapshot]' where [name] is the
            name of the guest and [snapshot] is what you would
            like to name the snapshot.

clone       Clone a guest.
            This does not clone in the ZFS sense of the word.
            If you want to use the clone and the original guest at the
            same time you will need to change the tap, con, and UUID properties
            or use the -r option to have chyves do this for you.
            Usage: 'chyves clone {-c|-r} {name} {clonename} [pool]' where {name}
            is the name of the guest and {clonename} is what you would
            like to name the new clone, and [pool] is optinally the destination
            pool for the clone.

export      Export a guest with all of it's properties and disks to a
            GZip'd tarball. Property file is in a ucl-type format.
            Disks output to a raw file, allowing for other managers using
            ahci-hd emulation to use them. Tarball is put in the guest
            dataset ex: /chyves/guestname/guestname.tar.gz
            Usage: 'chyves export [name]' where [name] is the name of the
            guest.

console     Consoles into a guest operating system. Utilizes nmdm(4) and
            cu(1) to open a console on a guest operating system. Since
            bhyve(8) does not emulate video. The guests need to be administered
            via a serial communication device. Since chyves uses cu(1), you will
            need to press the tilde (~) twice then period (.) to exit the
            console. To exit type "~~." quickly, sometimes hitting Enter is
            required first. If that fails exit the console, try pressing tilde
            (~) then press Control + D (^D). Note that on some machines, you
            cannot escape the console. See conreset below to escape all
            consoles.
            Usage: 'chyves console [name]' where [name] is the name
            of the guest operating system.

conreset    Kills all running instances of "cu".

dev         Allows for a function to be called direct from command line when
            developing for chyves. Requires dev_mode to be set with something
            other than "off". This is globally set on the primary pool on
            '.config'. See "Global Configuration Properties" section above.
            Usage: 'chyves dev [<function>|<command>] "param1" ... "param7"'
            The parameters are function indexed and only seven parameters
            are possible due to the way Bourne addresses parameter[10].
            Double quotes are required for parameters with strings, such as
            commands.

network     Used to store properties about associate network devices and creates
            bridge and tap interfaces. The sub-commands below store properties
            that are referenced and later used to recreated the network design
            when starting a guest. The host still requires configuration of the
            vlan and physical interfaces. chyves will handle creating and
            associating the tap interfaces with the appropriate bridge
            interfaces and also attaching those configured vlan and physical
            interfaces to the bridges while starting a guest. Multiple bridges
            and taps per guest is supported.

            add       chyves network {name} add [$null|tap{n}|vale{s}[:{p}]]
                        Used to add a tap or VALE interface to a guest, this
                        also adds the tap interface to the default bridge as set
                        in .defaults. When no value is given for the interface
                        then the next available tap interface is created and
                        added. {n} is the tap number, {s} is the VALE switch
                        number, and optionally {p} is the port on the VALE
                        switch.

            attach    chyves network bridge{n} attach iface{n}
                        Used to associate a vlan or physical interface with a
                        bridge. Keep in mind that a physical or vlan interface
                        can only be on one bridge group. See ifconfig(8) for
                        details.

            default   chyves network bridge{n} default
                        Used to set the default bridge to use for newly created
                        guests.

            join      chyves network bridge{n} add tap{n}
                        Used to add a tap to a bridge interface.

            migrate   chyves network bridge{n} migrate bridge{n}
                        Used to migrate a set of tap interfaces and outside
                        interface to an existing or new bridge interface. If
                        migrating to an existing bridge the external interface
                        is overwritten with the interface from the bridge being
                        migrated from and the tap interface lists are combined.

            private   chyves network bridge{n} private
                        Used to set the bridge to private mode. This means there
                        is not an external network connected. This can be useful
                        when sensitive data is being exchanged over a network
                        but not necessarily needing outside access such as a SQL
                        database. This could also be used with NAT. However NAT
                        support is not build into chyves.

            remove    chyves network {name} add {tap{n}|vale{s}[:{p}]}
                        Used to remove a tap or vale interface from a guest,
                        this also removes tap devices from the bridge
                        configuration.

            unjoin    chyves network bridge{n} remove tap{n}
                        Used to remove a tap from a bridge interface.

help        Prints version information and command valid syntax.

EXAMPLES

Example of a multi-pool dataset hierarchy:

  prim_pool/chyves/guests/
                  /guests/.defaults
                  /.config
                           pool_role=primary
                  /ISO
                  /Firmware
  secd_pool/chyves/guests
                  /.config
                          pool_role=secondary
  anther_pl/chyves/guests
                  /.config
                          pool_role=secondary
  offlinePL/chyves/guests
                  /.config
                          pool_role=offline

Example of a single pool dataset hierarchy:

  zroot/chyves/guests
              /guests/.defaults
              /.config
                      pool_role=primary
              /ISO
              /Firmware

Setup chyves on zpool named zroot:

  chyves setup zroot

Configure bridge0 to use em0 as the outside interface:

  chyves network bridge0 attach em0

Change the default bridge to "bridge50"

  chyves network bridge50 default

Fetch FreeBSD install ISO for later:

  chyves iso import ftp://ftp.example.org/FreeBSD-10.2-RELEASE-amd64.iso

Create a new guest named bguest with an 8 gigabyte HDD:

  chyves create bguest 8G

Create three new guests named "gst1", "gst2", and "gst3" each with an 8 gigabyte
HDD on a pool called "dev-pool":

  chyves create gst1,gst2,gst3 8G dev-pool

List ISO's:

  chyves iso list

Install the FreeBSD guest bguest:

  chyves install bguest FreeBSD-10.2-RELEASE-amd64.iso

Console into the installation:

  chyves console bguest

Once installation is done, exit console (~~.) and destroy guest:

  chyves destroy bguest

Now that the guest is installed, it can be started like usual:

  chyves start bguest

Some guest os's can be gracefully stopped:

  chyves stop bguest

List all guests created with:

  chyves list

You can change guest properties by using set:

  chyves set ram=512M bguest
  chyves set cpu=1  bguest
  chyves set tap=tap0  bguest
  chyves set con=nmdm0 bguest

You can also change multiple properties for one guest in one command by:

  chyves set ram=512M bguest cpu=1 tap=tap0 con=nmdm0

Or change multiple guests property in one command by:

  chyves set ram=512M bguest,bguest2,bguest3 cpu=1 tap=tap0 con=nmdm0

And even change multiple guests and multiple properties in one command by:

  chyves set ram=512M bguest,bguest2,bguest3 cpu=1 bguest4 tap=tap0 con=nmdm0

In the above example this changes the ram to 512M and cpu to 1 for bguest,
bguest2, and bguest3. Then on bguest4, tap is set to tap0 and con to nmdm0.

Get a specific guest property:

  chyves get ram bguest

Get all guest properties:

  chyves get all bguest

Install and run a Debian guest:

  chyves create debianvm 8G
  chyves set loader=grub-bhyve debianvm os=debian
  chyves install debianvm deb8.1-net.iso
  chyves start debianvm

Take a snapshot of a guest:

  chyves snap bguest@beforeupdate
  chyves list snapshots
  chyves roll bguest@beforeupdate

Make a replicated clone of a guest:

  chyves clone -r bguest bclone

AUTHOR
Justin D Holcomb -- @EpiJunkie
Trent -- @pr1ntf

SEE ALSO
bhyve(8), bhyveload(8), zfs(8), nmdm(4), cu(1), if_bridge(4), grub2-bhyve(8),
chyves-utils(8), virtio(4), ethers(5), netmap(4)
